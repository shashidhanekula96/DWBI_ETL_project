<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dataquality.analysis="http://dataquality.analysis" xmlns:dataquality.domain="http://dataquality.domain" xmlns:dataquality.indicators="http://dataquality.indicators" xmlns:relational="http://www.talend.org/cwm/resource/relational/2010">
  <dataquality.analysis:Analysis xmi:id="_OzqcAYGyEeqKnMyI8vv9TQ" name="Hospital Payment and Performance" creationDate="2020-04-18T16:21:48.607-0400" defaultContext="Default">
    <clientDependency href="../../metadata/connections/ss2019_0.1.item#_l12pYFZ9Eeqe5upFTt1TKg"/>
    <taggedValue xmi:id="_OzqcAoGyEeqKnMyI8vv9TQ" tag="Status" value="development"/>
    <taggedValue xmi:id="_OzqcA4GyEeqKnMyI8vv9TQ" tag="Author" value="talend@talend.com"/>
    <taggedValue xmi:id="_OzqcBIGyEeqKnMyI8vv9TQ" tag="Purpose" value="Column analysis of every column present for Hospital Payment and performance"/>
    <taggedValue xmi:id="_OzqcBYGyEeqKnMyI8vv9TQ" tag="Description" value="Hospital Payment and Performance column analysis for all the columns after the data conversion. The data is fetched from the SSMS database"/>
    <taggedValue xmi:id="_OzqcBoGyEeqKnMyI8vv9TQ" tag="Version" value="0.1"/>
    <taggedValue xmi:id="_cOCWcYGyEeqKnMyI8vv9TQ" tag="ANA_LAST_RUN_CONTEXT" value="Default"/>
    <taggedValue xmi:id="_cOCWcoGyEeqKnMyI8vv9TQ" tag="PREVIEW_ROW_NUMBER" value="50"/>
    <taggedValue xmi:id="_cOCWc4GyEeqKnMyI8vv9TQ" tag="NUMBER_OF_CONNECTIONS_PER_ANALYSIS" value="5"/>
    <taggedValue xmi:id="_cOELoIGyEeqKnMyI8vv9TQ" tag="Is Use Sample Data" value="false"/>
    <context xmi:id="_OzqcB4GyEeqKnMyI8vv9TQ">
      <connection href="../../metadata/connections/ss2019_0.1.item#_PKAbsFLcEeqqopVmRJ8I2A"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
      <analysedElements xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
    </context>
    <results xmi:id="_OzqcCIGyEeqKnMyI8vv9TQ">
      <resultMetadata xmi:id="_OzqcCYGyEeqKnMyI8vv9TQ" executionDate="2020-04-18T16:23:24.562-0400" executionDuration="1877" message="" executionNumber="1" lastRunOk="true" lastExecutionNumberOk="1"/>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC9gIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC9gYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjbYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cXXRkIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cXXRkYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cXXRkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cXXRk4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC9goGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC9g4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjeIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Facility_ID&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cXcxIIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_cXcxIYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_cXcxIoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_cXcxI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC9hIGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4732">
        <parameters xmi:id="_cOC9hYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjeYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Facility_ID&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cXiQsIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_cXiQsYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_cXiQsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_cXiQs4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cOC9hoGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cOC9h4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjeoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Facility_ID&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Facility_ID&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cXnJMIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cXnJMYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cXnJMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cXnJM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cXnJNIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cXnJNYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cXnJNoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cXnJN4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cXnJOIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cXnJOYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cOC9iIGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4732">
        <parameters xmi:id="_cOC9iYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyje4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Facility_ID&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Facility_ID&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cXsBsIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cXsBsYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cXsBsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cXsBs4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cXsBtIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cXsBtYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cXsBtoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cXsBt4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cXsBuIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cXsBuYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cOC9ioGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC9i4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjfIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Facility_ID&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Facility_ID&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cXwTIIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_cXwTIYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_cXwTIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_cXwTI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_cXwTJIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cXwTJYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_cXwTJoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cXwTJ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cOC9jIGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cOC9jYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cOC9joGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="110648.0">
          <parameters xmi:id="_cOC9j4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9kIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjfYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Facility_ID&quot;)), COUNT(&quot;Facility_ID&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cX0kkIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_cX0kkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_cX0kkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cX0kk4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cX0klIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cX0klYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cX0kloGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cX0kl4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cX0kmIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cX0kmYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cX0kmoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cX0km4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cX0knIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cX0knYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cX0knoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cX0kn4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cOC9kYGyEeqKnMyI8vv9TQ" computed="true" length="6">
          <parameters xmi:id="_cOC9koGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9k4GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjfoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Facility_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cX6EIIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_cX6EIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_cX6EIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cX6EI4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cX6EJIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cX6EJYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cX6EJoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cX6EJ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cX6EKIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cX6EKYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cX6EKoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cX6EK4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cX6ELIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cX6ELYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cX6ELoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cX6EL4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cOC9lIGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC9lYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9loGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjf4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Facility_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cX-VkIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_cX-VkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_cX-VkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cX-Vk4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cX-VlIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cX-VlYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cX-VloGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cX-Vl4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cX-VmIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cX-VmYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cX-VmoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cX-Vm4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cX-VnIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cX-VnYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cX-VnoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cX-Vn4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cOC9l4GyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC9mIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9mYGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjhoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Facility_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYghEIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_cYghEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_cYghEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cYghE4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYghFIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYghFYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYghFoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYghF4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYghGIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYghGYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cYghGoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYghG4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYghHIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYghHYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYghHoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cOC9moGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC9m4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9nIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjh4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN '' ELSE &quot;Facility_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYkygIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_cYkygYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_cYkygoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cYkyg4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYkyhIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYkyhYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYkyhoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYkyh4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYkyiIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYkyiYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cYkyioGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYkyi4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYkyjIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYkyjYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYkyjoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cYkyj4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cOC9nYGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC9noGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9n4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjiIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN '' ELSE &quot;Facility_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYujgIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_cYujgYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_cYujgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cYujg4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYujhIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYujhYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYujhoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYujh4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYujiIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYujiYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cYujioGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYuji4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYujjIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYujjYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYujjoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cYujj4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cOC9oIGyEeqKnMyI8vv9TQ" computed="true" length="6">
          <parameters xmi:id="_cOC9oYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9ooGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjg4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Facility_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYR3kIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_cYR3kYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_cYR3koGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cYR3k4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYR3lIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYR3lYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYR3loGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYR3l4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYR3mIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYR3mYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cYR3moGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYR3m4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYR3nIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYR3nYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYR3noGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cOC9o4GyEeqKnMyI8vv9TQ" computed="true" length="6">
          <parameters xmi:id="_cOC9pIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9pYGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjhIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN '' ELSE &quot;Facility_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYXXIIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_cYXXIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cYXXIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cYXXI4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYXXJIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYXXJYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYXXJoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYXXJ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYXXKIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYXXKYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_cYXXKoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYXXK4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYXXLIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYXXLYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYXXLoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cYXXL4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cOC9poGyEeqKnMyI8vv9TQ" computed="true" length="6">
          <parameters xmi:id="_cOC9p4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9qIGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjhYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN '' ELSE &quot;Facility_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYbokIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_cYbokYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_cYbokoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cYbok4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYbolIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYbolYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYboloGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYbol4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYbomIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYbomYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cYbomoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYbom4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYbonIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYbonYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYbonoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cYbon4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cOC9qYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="110648.0">
          <parameters xmi:id="_cOC9qoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9q4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjgIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Facility_ID&quot;)) )=0  THEN '' ELSE  &quot;Facility_ID&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYDOEIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cYDOEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cYDOEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cYDOE4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYDOFIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYDOFYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYDOFoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYDOF4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYDOGIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYDOGYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cYDOGoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYDOG4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYDOHIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYDOHYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYDOHoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cOC9rIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="110648.0">
          <parameters xmi:id="_cOC9rYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9roGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjgYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN '' ELSE &quot;Facility_ID&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYIGkIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cYIGkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cYIGkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cYIGk4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYIGlIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYIGlYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYIGloGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYIGl4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYIGmIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYIGmYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cYIGmoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYIGm4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYIGnIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYIGnYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYIGnoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cYIGn4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cOC9r4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="110648.0">
          <parameters xmi:id="_cOC9sIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9sYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodUIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjgoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN '' ELSE &quot;Facility_ID&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Facility_ID&quot; IS NULL  THEN '' ELSE &quot;Facility_ID&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cYNmIIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_cYNmIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_cYNmIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cYNmI4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cYNmJIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cYNmJYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cYNmJoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cYNmJ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cYNmKIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cYNmKYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cYNmKoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cYNmK4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cYNmLIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cYNmLYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cYNmLoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cYNmL4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC9soGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC9s4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjdIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cY3GYIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cY3GYYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cY3GYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cY3GY4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC9tIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC9tYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjiYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Facility_Name&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cY-bIIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_cY-bIYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_cY-bIoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_cY-bI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC9toGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4568">
        <parameters xmi:id="_cOC9t4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjioGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Facility_Name&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cZKoYIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_cZKoYYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_cZKoYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_cZKoY4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cOC9uIGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cOC9uYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyji4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Facility_Name&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Facility_Name&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cZQH8IGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cZQH8YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cZQH8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cZQH84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cZQH9IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cZQH9YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cZQH9oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cZQH94GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cZQH-IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cZQH-YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cOC9uoGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4568">
        <parameters xmi:id="_cOC9u4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjjIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Facility_Name&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Facility_Name&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cZVngIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cZVngYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cZVngoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cZVng4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cZVnhIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cZVnhYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cZVnhoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cZVnh4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cZVniIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cZVniYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cOC9vIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC9vYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjjYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Facility_Name&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Facility_Name&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cZbuIIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_cZbuIYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_cZbuIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_cZbuI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_cZbuJIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cZbuJYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_cZbuJoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cZbuJ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cOC9voGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cOC9v4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cOC9wIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="539096.0">
          <parameters xmi:id="_cOC9wYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9woGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjjoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Facility_Name&quot;)), COUNT(&quot;Facility_Name&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_Name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cZjC4IGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_cZjC4YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_cZjC4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cZjC44GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cZjC5IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cZjC5YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cZjC5oGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cZjC54GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cZjC6IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cZjC6YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cZjC6oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cZjC64GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cZjC7IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cZjC7YGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cZjC7oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cZjC74GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cOC9w4GyEeqKnMyI8vv9TQ" computed="true" length="50">
          <parameters xmi:id="_cOC9xIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9xYGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjj4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Facility_Name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_Name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cZpJgIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_cZpJgYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_cZpJgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cZpJg4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cZpJhIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cZpJhYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cZpJhoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cZpJh4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cZpJiIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cZpJiYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cZpJioGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cZpJi4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cZpJjIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cZpJjYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cZpJjoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cZpJj4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cOC9xoGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC9x4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9yIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjkIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Facility_Name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_Name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cZuCAIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_cZuCAYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_cZuCAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cZuCA4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cZuCBIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cZuCBYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cZuCBoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cZuCB4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cZuCCIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cZuCCYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cZuCCoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cZuCC4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cZuCDIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cZuCDYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cZuCDoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cZuCD4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cOC9yYGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC9yoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9y4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjl4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Facility_Name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_Name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cabzsIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_cabzsYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_cabzsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cabzs4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cabztIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cabztYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cabztoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cabzt4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cabzuIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cabzuYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cabzuoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cabzu4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cabzvIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cabzvYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cabzvoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cOC9zIGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC9zYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9zoGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjmIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN '' ELSE &quot;Facility_Name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cahTQIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_cahTQYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_cahTQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cahTQ4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cahTRIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cahTRYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cahTRoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cahTR4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cahTSIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cahTSYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cahTSoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cahTS4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cahTTIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cahTTYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cahTToGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cahTT4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cOC9z4GyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC90IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC90YGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjmYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN '' ELSE &quot;Facility_Name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_camy0IGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_camy0YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_camy0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_camy04GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_camy1IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_camy1YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_camy1oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_camy14GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_camy2IGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_camy2YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_camy2oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_camy24GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_camy3IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_camy3YGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_camy3oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_camy34GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cOC90oGyEeqKnMyI8vv9TQ" computed="true" length="50">
          <parameters xmi:id="_cOC904GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC91IGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjlIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Facility_Name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_Name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_caHDkIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_caHDkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_caHDkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_caHDk4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_caHDlIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_caHDlYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_caHDloGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_caHDl4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_caHDmIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_caHDmYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_caHDmoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_caHDm4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_caHDnIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_caHDnYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_caHDnoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cOC91YGyEeqKnMyI8vv9TQ" computed="true" length="50">
          <parameters xmi:id="_cOC91oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC914GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjlYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN '' ELSE &quot;Facility_Name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_caL8EIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_caL8EYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_caL8EoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_caL8E4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_caL8FIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_caL8FYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_caL8FoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_caL8F4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_caL8GIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_caL8GYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_caL8GoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_caL8G4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_caL8HIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_caL8HYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_caL8HoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_caL8H4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cOC92IGyEeqKnMyI8vv9TQ" computed="true" length="50">
          <parameters xmi:id="_cOC92YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC92oGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjloGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN '' ELSE &quot;Facility_Name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_caWUIIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_caWUIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_caWUIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_caWUI4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_caWUJIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_caWUJYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_caWUJoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_caWUJ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_caWUKIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_caWUKYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_caWUKoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_caWUK4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_caWULIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_caWULYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_caWULoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_caWUL4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cOC924GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="539096.0">
          <parameters xmi:id="_cOC93IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC93YGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjkYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Facility_Name&quot;)) )=0  THEN '' ELSE  &quot;Facility_Name&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Facility_Name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cZzhkIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cZzhkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cZzhkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cZzhk4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cZzhlIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cZzhlYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cZzhloGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cZzhl4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cZzhmIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cZzhmYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cZzhmoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cZzhm4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cZzhnIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cZzhnYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cZzhnoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cOC93oGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="539096.0">
          <parameters xmi:id="_cOC934GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC94IGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjkoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN '' ELSE &quot;Facility_Name&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Facility_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cZ5BIIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cZ5BIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cZ5BIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cZ5BI4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cZ5BJIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cZ5BJYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cZ5BJoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cZ5BJ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cZ5BKIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cZ5BKYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cZ5BKoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cZ5BK4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cZ5BLIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cZ5BLYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cZ5BLoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cZ5BL4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cOC94YGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="539096.0">
          <parameters xmi:id="_cOC94oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC944GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodVIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjk4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN '' ELSE &quot;Facility_Name&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Facility_Name&quot; IS NULL  THEN '' ELSE &quot;Facility_Name&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_caBkAIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_caBkAYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_caBkAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_caBkA4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_caBkBIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_caBkBYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_caBkBoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_caBkB4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_caBkCIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_caBkCYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_caBkCoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_caBkC4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_caBkDIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_caBkDYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_caBkDoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_caBkD4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC95YGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC95oGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjYoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cavVsIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cavVsYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cavVsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cavVs4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC954GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC96IGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjmoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Address&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ca01QIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_ca01QYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_ca01QoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_ca01Q4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC96YGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4706">
        <parameters xmi:id="_cOC96oGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjm4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Address&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ca5twIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_ca5twYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_ca5twoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_ca5tw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cOC964GyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cOC97IGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjnIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Address&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Address&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ca-mQIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_ca-mQYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_ca-mQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_ca-mQ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_ca-mRIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_ca-mRYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_ca-mRoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_ca-mR4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_ca-mSIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_ca-mSYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cOC97YGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4706">
        <parameters xmi:id="_cOC97oGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjnYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Address&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Address&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cbIXQIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cbIXQYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cbIXQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cbIXQ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cbIXRIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cbIXRYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cbIXRoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cbIXR4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cbIXSIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cbIXSYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cOC974GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC98IGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjnoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Address&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Address&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cbNPwIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_cbNPwYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_cbNPwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_cbNPw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_cbNPxIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cbNPxYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_cbNPxoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cbNPx4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cOC98YGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cOC98oGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cOC984GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="365664.0">
          <parameters xmi:id="_cOC99IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC99YGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKcIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Address&quot;)), COUNT(&quot;Address&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Address&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Address&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Address&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cbSvUIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_cbSvUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_cbSvUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cbSvU4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cbSvVIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cbSvVYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cbSvVoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cbSvV4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cbSvWIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cbSvWYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cbSvWoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cbSvW4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cbSvXIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cbSvXYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cbSvXoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cbSvX4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cOC99oGyEeqKnMyI8vv9TQ" computed="true" length="50">
          <parameters xmi:id="_cOC994GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9-IGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKcYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Address&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Address&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Address&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Address&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cbXn0IGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_cbXn0YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_cbXn0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cbXn04GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cbXn1IGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cbXn1YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cbXn1oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cbXn14GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cbXn2IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cbXn2YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cbXn2oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cbXn24GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cbXn3IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cbXn3YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cbXn3oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cbXn34GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cOC9-YGyEeqKnMyI8vv9TQ" computed="true" length="7">
          <parameters xmi:id="_cOC9-oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9-4GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKcoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Address&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Address&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Address&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Address&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cbgKsIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_cbgKsYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_cbgKsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cbgKs4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cbgKtIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cbgKtYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cbgKtoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cbgKt4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cbgKuIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cbgKuYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cbgKuoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cbgKu4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cbgKvIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cbgKvYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cbgKvoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cbgKv4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cOC9_IGyEeqKnMyI8vv9TQ" computed="true" length="7">
          <parameters xmi:id="_cOC9_YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC9_oGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKeYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Address&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Address&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ccLgIIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_ccLgIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_ccLgIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_ccLgI4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ccLgJIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ccLgJYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ccLgJoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ccLgJ4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ccLgKIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ccLgKYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ccLgKoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ccLgK4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ccLgLIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ccLgLYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ccLgLoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cOC9_4GyEeqKnMyI8vv9TQ" computed="true" length="7">
          <parameters xmi:id="_cOC-AIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-AYGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKeoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Address&quot; IS NULL  THEN '' ELSE &quot;Address&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Address&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Address&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ccUqEIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_ccUqEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_ccUqEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_ccUqE4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ccUqFIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ccUqFYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ccUqFoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ccUqF4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ccUqGIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ccUqGYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ccUqGoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ccUqG4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ccUqHIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ccUqHYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ccUqHoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ccUqH4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cOC-AoGyEeqKnMyI8vv9TQ" computed="true" length="7">
          <parameters xmi:id="_cOC-A4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-BIGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKe4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Address&quot; IS NULL  THEN '' ELSE &quot;Address&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ccb-0IGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_ccb-0YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_ccb-0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_ccb-04GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ccb-1IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ccb-1YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ccb-1oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ccb-14GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ccb-2IGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ccb-2YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ccb-2oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ccb-24GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ccb-3IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ccb-3YGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ccb-3oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ccb-34GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cOC-BYGyEeqKnMyI8vv9TQ" computed="true" length="50">
          <parameters xmi:id="_cOC-BoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-B4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKdoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Address&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Address&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cb5zUIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_cb5zUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_cb5zUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cb5zU4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cb5zVIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cb5zVYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cb5zVoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cb5zV4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cb5zWIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cb5zWYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cb5zWoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cb5zW4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cb5zXIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cb5zXYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cb5zXoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cOC-CIGyEeqKnMyI8vv9TQ" computed="true" length="50">
          <parameters xmi:id="_cOC-CYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-CoGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKd4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Address&quot; IS NULL  THEN '' ELSE &quot;Address&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Address&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Address&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cb_S4IGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_cb_S4YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cb_S4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cb_S44GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cb_S5IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cb_S5YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cb_S5oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cb_S54GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cb_S6IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cb_S6YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_cb_S6oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cb_S64GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cb_S7IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cb_S7YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cb_S7oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cb_S74GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cOC-C4GyEeqKnMyI8vv9TQ" computed="true" length="50">
          <parameters xmi:id="_cOC-DIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-DYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKeIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Address&quot; IS NULL  THEN '' ELSE &quot;Address&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ccEycIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_ccEycYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_ccEycoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_ccEyc4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ccEydIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ccEydYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ccEydoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ccEyd4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ccEyeIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ccEyeYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ccEyeoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ccEye4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ccEyfIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ccEyfYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ccEyfoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ccEyf4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cOC-DoGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="365664.0">
          <parameters xmi:id="_cOC-D4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-EIGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKc4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Address&quot;)) )=0  THEN '' ELSE  &quot;Address&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Address&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cblqQIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cblqQYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cblqQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cblqQ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cblqRIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cblqRYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cblqRoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cblqR4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cblqSIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cblqSYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cblqSoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cblqS4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cblqTIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cblqTYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cblqToGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cOC-EYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="365664.0">
          <parameters xmi:id="_cOC-EoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-E4GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKdIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Address&quot; IS NULL  THEN '' ELSE &quot;Address&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Address&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Address&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cbqiwIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cbqiwYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cbqiwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cbqiw4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cbqixIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cbqixYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cbqixoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cbqix4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cbqiyIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cbqiyYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cbqiyoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cbqiy4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cbqizIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cbqizYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cbqizoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cbqiz4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cOC-FIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="365664.0">
          <parameters xmi:id="_cOC-FYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-FoGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodWIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKdYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Address&quot; IS NULL  THEN '' ELSE &quot;Address&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Address&quot; IS NULL  THEN '' ELSE &quot;Address&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cbwCUIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_cbwCUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_cbwCUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cbwCU4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cbwCVIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cbwCVYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cbwCVoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cbwCV4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cbwCWIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cbwCWYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cbwCWoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cbwCW4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cbwCXIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cbwCXYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cbwCXoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cbwCX4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC-GIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-GYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjY4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ccheYIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_ccheYYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_ccheYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_ccheY4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC-GoGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-G4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKfIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;City&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ccrPYIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_ccrPYYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_ccrPYoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_ccrPY4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC-HIGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="2917">
        <parameters xmi:id="_cOC-HYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKfYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;City&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ccxWAIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_ccxWAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_ccxWAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_ccxWA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cOC-HoGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cOC-H4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKfoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;City&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;City&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cc21kIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cc21kYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cc21koGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cc21k4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cc21lIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cc21lYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cc21loGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cc21l4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cc21mIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cc21mYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cOC-IIGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="2917">
        <parameters xmi:id="_cOC-IYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKf4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;City&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;City&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cc8VIIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cc8VIYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cc8VIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cc8VI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cc8VJIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cc8VJYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cc8VJoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cc8VJ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cc8VKIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cc8VKYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cOC-IoGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-I4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKgIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;City&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;City&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cdE4AIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_cdE4AYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_cdE4AoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_cdE4A4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_cdE4BIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cdE4BYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_cdE4BoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cdE4B4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cOC-JIGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cOC-JYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cOC-JoGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="162160.0">
          <parameters xmi:id="_cOC-J4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-KIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKgYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;City&quot;)), COUNT(&quot;City&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;City&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;City&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;City&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cdK-oIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_cdK-oYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_cdK-ooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cdK-o4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cdK-pIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cdK-pYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cdK-poGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cdK-p4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cdK-qIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cdK-qYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cdK-qoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cdK-q4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cdK-rIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cdK-rYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cdK-roGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cdK-r4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cOC-KYGyEeqKnMyI8vv9TQ" computed="true" length="20">
          <parameters xmi:id="_cOC-KoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-K4GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKgoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;City&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;City&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;City&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;City&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cdP3IIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_cdQeMIGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_cdQeMYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cdQeMoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cdQeM4GyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cdQeNIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cdQeNYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cdQeNoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cdQeN4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cdQeOIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cdQeOYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cdQeOoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cdQeO4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cdQePIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cdQePYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cdQePoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cOC-LIGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-LYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-LoGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKg4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;City&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;City&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;City&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;City&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cdaPMIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_cdaPMYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_cdaPMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cdaPM4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cdaPNIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cdaPNYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cdaPNoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cdaPN4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cdaPOIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cdaPOYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cdaPOoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cdaPO4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cdaPPIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cdaPPYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cdaPPoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cdaPP4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cOC-L4GyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-MIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-MYGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKioGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;City&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;City&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ceJPAIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_ceJPAYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_ceJPAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_ceJPA4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ceJPBIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ceJPBYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ceJPBoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ceJPB4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ceJPCIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ceJPCYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ceJPCoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ceJPC4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ceJPDIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ceJPDYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ceJPDoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cOC-MoGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-M4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-NIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKi4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;City&quot; IS NULL  THEN '' ELSE &quot;City&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;City&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;City&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cePVoIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_cePVoYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_cePVooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cePVo4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cePVpIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cePVpYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cePVpoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cePVp4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cePVqIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cePVqYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cePVqoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cePVq4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cePVrIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cePVrYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cePVroGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cePVr4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cOC-NYGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-NoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-N4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKjIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;City&quot; IS NULL  THEN '' ELSE &quot;City&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ceU1MIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_ceU1MYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_ceU1MoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_ceU1M4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ceU1NIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ceU1NYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ceU1NoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ceU1N4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ceU1OIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ceU1OYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ceU1OoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ceU1O4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ceU1PIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ceU1PYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ceU1PoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ceU1P4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cOC-OIGyEeqKnMyI8vv9TQ" computed="true" length="20">
          <parameters xmi:id="_cOC-OYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-OoGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKh4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;City&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;City&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cdz30IGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_cdz30YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_cdz30oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cdz304GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cdz31IGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cdz31YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cdz31oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cdz314GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cdz32IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cdz32YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cdz32oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cdz324GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cdz33IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cdz33YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cdz33oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cOC-O4GyEeqKnMyI8vv9TQ" computed="true" length="20">
          <parameters xmi:id="_cOC-PIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-PYGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKiIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;City&quot; IS NULL  THEN '' ELSE &quot;City&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;City&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;City&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cd5XYIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_cd5XYYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cd5XYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cd5XY4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cd5XZIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cd5XZYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cd5XZoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cd5XZ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cd5XaIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cd5XaYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_cd5XaoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cd5Xa4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cd5XbIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cd5XbYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cd5XboGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cd5Xb4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cOC-PoGyEeqKnMyI8vv9TQ" computed="true" length="20">
          <parameters xmi:id="_cOC-P4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-QIGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKiYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;City&quot; IS NULL  THEN '' ELSE &quot;City&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cd-28IGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_cd-28YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_cd-28oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cd-284GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cd-29IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cd-29YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cd-29oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cd-294GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cd-2-IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cd-2-YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cd-2-oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cd-2-4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cd-2_IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cd-2_YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cd-2_oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cd-2_4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cOC-QYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="162160.0">
          <parameters xmi:id="_cOC-QoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-Q4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKhIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;City&quot;)) )=0  THEN '' ELSE  &quot;City&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;City&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cdfuwIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cdfuwYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cdfuwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cdfuw4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cdfuxIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cdfuxYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cdfuxoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cdfux4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cdfuyIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cdfuyYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cdfuyoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cdfuy4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cdfuzIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cdfuzYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cdfuzoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cOC-RIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="162160.0">
          <parameters xmi:id="_cOC-RYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-RoGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKhYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;City&quot; IS NULL  THEN '' ELSE &quot;City&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;City&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;City&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cdlOUIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cdlOUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cdlOUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cdlOU4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cdlOVIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cdlOVYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cdlOVoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cdlOV4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cdlOWIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cdlOWYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cdlOWoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cdlOW4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cdlOXIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cdlOXYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cdlOXoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cdlOX4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cOC-R4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="162160.0">
          <parameters xmi:id="_cOC-SIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-SYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodXIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKhoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;City&quot; IS NULL  THEN '' ELSE &quot;City&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;City&quot; IS NULL  THEN '' ELSE &quot;City&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cdqt4IGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_cdqt4YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_cdqt4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cdqt44GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cdqt5IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cdqt5YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cdqt5oGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cdqt54GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cdqt6IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cdqt6YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cdqt6oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cdqt64GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cdqt7IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cdqt7YGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cdqt7oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cdqt74GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC-S4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-TIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjc4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cebi4IGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cebi4YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cebi4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cebi44GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC-TYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-ToGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKjYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;State&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ceks0IGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_ceks0YGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_ceks0oGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_ceks04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC-T4GyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="56">
        <parameters xmi:id="_cOC-UIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKjoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;State&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ceqMYIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_ceqMYYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_ceqMYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_ceqMY4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cOC-UYGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cOC-UoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKj4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;State&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;State&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cewTAIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cewTAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cewTAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cewTA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cewTBIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cewTBYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cewTBoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cewTB4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cewTCIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cewTCYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cOC-U4GyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="56">
        <parameters xmi:id="_cOC-VIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKkIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;State&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;State&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ce-8gIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_ce-8gYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_ce-8goGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_ce-8g4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_ce-8hIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_ce-8hYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_ce-8hoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_ce-8h4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_ce-8iIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_ce-8iYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cOC-VYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-VoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKkYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;State&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;State&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cfFqMIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_cfFqMYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_cfFqMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_cfFqM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_cfFqNIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cfFqNYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_cfFqNoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cfFqN4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cOC-V4GyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cOC-WIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cOC-WYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="37856.0">
          <parameters xmi:id="_cOC-WoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-W4GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKkoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;State&quot;)), COUNT(&quot;State&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;State&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;State&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;State&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cfM-8IGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_cfM-8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_cfM-8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cfM-84GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cfM-9IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cfM-9YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cfM-9oGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cfM-94GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cfM--IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cfM--YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cfM--oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cfM--4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cfM-_IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cfM-_YGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cfM-_oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cfM-_4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cOC-XIGyEeqKnMyI8vv9TQ" computed="true" length="2">
          <parameters xmi:id="_cOC-XYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-XoGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKk4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;State&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;State&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;State&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;State&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cfTsoIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_cfTsoYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_cfTsooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cfTso4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cfTspIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cfTspYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cfTspoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cfTsp4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cfTsqIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cfTsqYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cfTsqoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cfTsq4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cfTsrIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cfTsrYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cfTsroGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cfTsr4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cOC-X4GyEeqKnMyI8vv9TQ" computed="true" length="2">
          <parameters xmi:id="_cOC-YIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-YYGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKlIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;State&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;State&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;State&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;State&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cfc2kIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_cfc2kYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_cfc2koGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cfc2k4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cfc2lIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cfc2lYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cfc2loGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cfc2l4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cfc2mIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cfc2mYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cfc2moGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cfc2m4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cfc2nIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cfc2nYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cfc2noGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cfc2n4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cOC-YoGyEeqKnMyI8vv9TQ" computed="true" length="2">
          <parameters xmi:id="_cOC-Y4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-ZIGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKm4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;State&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;State&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cgR9AIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_cgR9AYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_cgR9AoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cgR9A4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cgR9BIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cgR9BYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cgR9BoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cgR9B4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cgR9CIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cgR9CYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cgR9CoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cgR9C4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cgR9DIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cgR9DYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cgR9DoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cOC-ZYGyEeqKnMyI8vv9TQ" computed="true" length="2">
          <parameters xmi:id="_cOC-ZoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-Z4GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKnIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;State&quot; IS NULL  THEN '' ELSE &quot;State&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;State&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;State&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cgYqsIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_cgYqsYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_cgYqsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cgYqs4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cgYqtIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cgYqtYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cgYqtoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cgYqt4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cgYquIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cgYquYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cgYquoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cgYqu4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cgYqvIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cgYqvYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cgYqvoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cgYqv4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cOC-aIGyEeqKnMyI8vv9TQ" computed="true" length="2">
          <parameters xmi:id="_cOC-aYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-aoGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKnYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;State&quot; IS NULL  THEN '' ELSE &quot;State&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cgh0oIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_cgh0oYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_cgh0ooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cgh0o4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cgh0pIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cgh0pYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cgh0poGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cgh0p4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cgh0qIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cgh0qYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cgh0qoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cgh0q4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cgh0rIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cgh0rYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cgh0roGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cgh0r4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cOC-a4GyEeqKnMyI8vv9TQ" computed="true" length="2">
          <parameters xmi:id="_cOC-bIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-bYGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKmIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;State&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;State&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cf6woIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_cf6woYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_cf6wooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cf6wo4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cf6wpIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cf6wpYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cf6wpoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cf6wp4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cf6wqIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cf6wqYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cf6wqoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cf6wq4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cf6wrIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cf6wrYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cf6wroGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cOC-boGyEeqKnMyI8vv9TQ" computed="true" length="2">
          <parameters xmi:id="_cOC-b4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-cIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKmYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;State&quot; IS NULL  THEN '' ELSE &quot;State&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;State&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;State&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cgBeUIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_cgBeUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cgBeUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cgBeU4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cgBeVIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cgBeVYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cgBeVoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cgBeV4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cgBeWIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cgBeWYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_cgBeWoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cgBeW4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cgBeXIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cgBeXYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cgBeXoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cgBeX4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cOC-cYGyEeqKnMyI8vv9TQ" computed="true" length="2">
          <parameters xmi:id="_cOC-coGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-c4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKmoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;State&quot; IS NULL  THEN '' ELSE &quot;State&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cgHk8IGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_cgHk8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_cgHk8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cgHk84GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cgHk9IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cgHk9YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cgHk9oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cgHk94GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cgHk-IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cgHk-YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cgHk-oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cgHk-4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cgHk_IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cgHk_YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cgHk_oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cgHk_4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cOC-dIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="37856.0">
          <parameters xmi:id="_cOC-dYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-doGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKlYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;State&quot;)) )=0  THEN '' ELSE  &quot;State&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;State&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cfjkQIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cfjkQYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cfjkQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cfjkQ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cfjkRIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cfjkRYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cfjkRoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cfjkR4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cfjkSIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cfjkSYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cfjkSoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cfjkS4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cfjkTIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cfjkTYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cfjkToGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cOC-d4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="37856.0">
          <parameters xmi:id="_cOC-eIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-eYGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKloGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;State&quot; IS NULL  THEN '' ELSE &quot;State&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;State&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;State&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cfpq4IGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cfpq4YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cfpq4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cfpq44GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cfpq5IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cfpq5YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cfpq5oGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cfpq54GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cfpq6IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cfpq6YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cfpq6oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cfpq64GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cfpq7IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cfpq7YGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cfpq7oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cfpq74GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cOC-eoGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="37856.0">
          <parameters xmi:id="_cOC-e4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-fIGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodYIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKl4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;State&quot; IS NULL  THEN '' ELSE &quot;State&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;State&quot; IS NULL  THEN '' ELSE &quot;State&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cf0qAIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_cf0qAYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_cf0qAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cf0qA4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cf0qBIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cf0qBYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cf0qBoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cf0qB4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cf0qCIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cf0qCYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cf0qCoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cf0qC4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cf0qDIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cf0qDYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cf0qDoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cf0qD4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC-foGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-f4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjbIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cgoiUIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cgoiUYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cgoiUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cgoiU4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC-gIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-gYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKnoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Zip_Code&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cgvQAIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_cgvQAYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_cgvQAoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_cgvQA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC-goGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4359">
        <parameters xmi:id="_cOC-g4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKn4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Zip_Code&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cg19sIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_cg19sYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_cg19soGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_cg19s4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cOC-hIGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cOC-hYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKoIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Zip_Code&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Zip_Code&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_chDZEIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_chDZEYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_chDZEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_chDZE4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_chDZFIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_chDZFYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_chDZFoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_chDZF4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_chDZGIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_chDZGYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cOC-hoGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4359">
        <parameters xmi:id="_cOC-h4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKoYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Zip_Code&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Zip_Code&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_chNKEIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_chNKEYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_chNKEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_chNKE4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_chNKFIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_chNKFYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_chNKFoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_chNKF4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_chNKGIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_chNKGYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cOC-iIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-iYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKooGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Zip_Code&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Zip_Code&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_chZXUIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_chZXUYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_chZ-YIGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_chZ-YYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_chZ-YoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_chZ-Y4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_chZ-ZIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_chZ-ZYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cOC-ioGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cOC-i4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cOC-jIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="93240.0">
          <parameters xmi:id="_cOC-jYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-joGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKo4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Zip_Code&quot;)), COUNT(&quot;Zip_Code&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Zip_Code&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Zip_Code&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_chgFAIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_chgFAYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_chgFAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_chgFA4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_chgFBIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_chgFBYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_chgFBoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_chgFB4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_chgFCIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_chgFCYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_chgFCoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_chgFC4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_chgFDIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_chgFDYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_chgFDoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_chgFD4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cOC-j4GyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC-kIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-kYGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKpIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Zip_Code&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Zip_Code&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Zip_Code&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_chmysIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_chmysYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_chmysoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_chmys4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_chmytIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_chmytYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_chmytoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_chmyt4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_chmyuIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_chmyuYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_chmyuoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_chmyu4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_chmyvIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_chmyvYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_chmyvoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_chmyv4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cOC-koGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-k4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-lIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKpYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Zip_Code&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Zip_Code&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Zip_Code&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_chxKwIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_chxKwYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_chxKwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_chxKw4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_chxKxIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_chxKxYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_chxKxoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_chxKx4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_chxKyIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_chxKyYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_chxKyoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_chxKy4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_chxKzIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_chxKzYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_chxKzoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_chxKz4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cOC-lYGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-loGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-l4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKrIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Zip_Code&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Zip_Code&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cirJsIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_cirJsYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_cirJsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cirJs4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cirJtIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cirJtYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cirJtoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cirJt4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cirJuIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cirJuYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cirJuoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cirJu4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cirJvIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cirJvYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cirJvoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cOC-mIGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-mYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-moGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKrYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN '' ELSE &quot;Zip_Code&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Zip_Code&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ciyecIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_ciyecYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_ciyecoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_ciyec4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ciyedIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ciyedYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ciyedoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ciyed4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ciyeeIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ciyeeYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ciyeeoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ciyee4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ciyefIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ciyefYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ciyefoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ciyef4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cOC-m4GyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-nIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-nYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKroGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN '' ELSE &quot;Zip_Code&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ci8PcIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_ci8PcYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_ci8PcoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_ci8Pc4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ci8PdIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ci8PdYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ci8PdoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ci8Pd4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ci8PeIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ci8PeYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ci8PeoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ci8Pe4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ci8PfIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ci8PfYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ci8PfoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ci8Pf4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cOC-noGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC-n4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-oIGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKqYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Zip_Code&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Zip_Code&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ciQS8IGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_ciQS8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_ciQS8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_ciQS84GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ciQS9IGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ciQS9YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ciQS9oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ciQS94GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ciQS-IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ciQS-YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ciQS-oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ciQS-4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ciQS_IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ciQS_YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ciQS_oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cOC-oYGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC-ooGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-o4GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKqoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN '' ELSE &quot;Zip_Code&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Zip_Code&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ciWZkIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_ciWZkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_ciWZkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_ciWZk4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ciWZlIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ciWZlYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ciWZloGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ciWZl4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ciWZmIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ciWZmYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_ciWZmoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ciWZm4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ciWZnIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ciWZnYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ciWZnoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ciWZn4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cOC-pIGyEeqKnMyI8vv9TQ" computed="true" length="5">
          <parameters xmi:id="_cOC-pYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-poGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKq4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN '' ELSE &quot;Zip_Code&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cihYsIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_cihYsYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_cihYsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cihYs4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cihYtIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cihYtYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cihYtoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cihYt4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cihYuIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cihYuYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cihYuoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cihYu4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cihYvIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cihYvYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cihYvoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cihYv4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cOC-p4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="93240.0">
          <parameters xmi:id="_cOC-qIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-qYGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKpoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Zip_Code&quot;)) )=0  THEN '' ELSE  &quot;Zip_Code&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Zip_Code&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ch34cIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_ch34cYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_ch34coGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_ch34c4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ch34dIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ch34dYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ch34doGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ch34d4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ch34eIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ch34eYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ch34eoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ch34e4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ch34fIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ch34fYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ch34foGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cOC-qoGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="93240.0">
          <parameters xmi:id="_cOC-q4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-rIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKp4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN '' ELSE &quot;Zip_Code&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Zip_Code&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ch9_EIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_ch9_EYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_ch9_EoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_ch9_E4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ch9_FIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ch9_FYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ch9_FoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ch9_F4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ch9_GIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ch9_GYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ch9_GoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ch9_G4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ch9_HIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ch9_HYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ch9_HoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ch9_H4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cOC-rYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="93240.0">
          <parameters xmi:id="_cOC-roGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-r4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodZIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKqIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN '' ELSE &quot;Zip_Code&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Zip_Code&quot; IS NULL  THEN '' ELSE &quot;Zip_Code&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ciHwEIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_ciHwEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_ciHwEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_ciHwE4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ciHwFIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ciHwFYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ciHwFoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ciHwF4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ciHwGIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ciHwGYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ciHwGoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ciHwG4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ciHwHIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ciHwHYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ciHwHoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ciHwH4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC-sYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-soGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjdoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cjC9IIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cjC9IYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cjC9IoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cjC9I4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC-s4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-tIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKr4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;County_name&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cjKR4IGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_cjKR4YGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_cjKR4oGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_cjKR44GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC-tYGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="1561">
        <parameters xmi:id="_cOC-toGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKsIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;County_name&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cjVRAIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_cjVRAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_cjVRAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_cjVRA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cOC-t4GyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cOC-uIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKsYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;County_name&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;County_name&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cjfCAIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cjfCAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cjfCAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cjfCA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cjfCBIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cjfCBYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cjfCBoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cjfCB4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cjfCCIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cjfCCYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cOC-uYGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="1561">
        <parameters xmi:id="_cOC-uoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKsoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;County_name&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;County_name&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cjoL8IGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cjoL8YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cjoL8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cjoL84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cjoL9IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cjoL9YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cjoL9oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cjoL94GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cjoL-IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cjoL-YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cOC-u4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-vIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKs4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;County_name&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;County_name&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cjzyIIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_cjzyIYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_cjzyIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_cjzyI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_cjzyJIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cjzyJYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_cjzyJoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cjzyJ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cOC-vYGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cOC-voGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cOC-v4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="138448.0">
          <parameters xmi:id="_cOC-wIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-wYGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKtIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;County_name&quot;)), COUNT(&quot;County_name&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;County_name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;County_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;County_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cj6f0IGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_cj6f0YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_cj6f0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cj6f04GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cj6f1IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cj6f1YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cj6f1oGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cj6f14GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cj6f2IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cj6f2YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cj6f2oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cj6f24GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cj6f3IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cj6f3YGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cj6f3oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cj6f34GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cOC-woGyEeqKnMyI8vv9TQ" computed="true" length="25">
          <parameters xmi:id="_cOC-w4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-xIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKtYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;County_name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;County_name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;County_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;County_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ckBNgIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_ckBNgYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_ckBNgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_ckBNg4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ckBNhIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_ckBNhYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ckBNhoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ckBNh4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ckBNiIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ckBNiYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_ckBNioGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ckBNi4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ckBNjIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ckBNjYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ckBNjoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ckBNj4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cOC-xYGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-xoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-x4GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKtoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;County_name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;County_name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;County_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;County_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ckLlkIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_ckLlkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_ckLlkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_ckLlk4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ckLllIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ckLllYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ckLlloGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ckLll4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ckLlmIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ckLlmYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ckLlmoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ckLlm4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ckLlnIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ckLlnYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ckLlnoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ckLln4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cOC-yIGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-yYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-yoGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKvYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;County_name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;County_name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_clIn0IGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_clIn0YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_clIn0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_clIn04GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_clIn1IGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_clIn1YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_clIn1oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_clIn14GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_clIn2IGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_clIn2YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_clIn2oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_clIn24GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_clIn3IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_clIn3YGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_clIn3oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cOC-y4GyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-zIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-zYGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKvoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;County_name&quot; IS NULL  THEN '' ELSE &quot;County_name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;County_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;County_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_clPVgIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_clPVgYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_clPVgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_clPVg4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_clPVhIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_clPVhYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_clPVhoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_clPVh4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_clPViIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_clPViYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_clPVioGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_clPVi4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_clPVjIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_clPVjYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_clPVjoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_clPVj4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cOC-zoGyEeqKnMyI8vv9TQ" computed="true" length="3">
          <parameters xmi:id="_cOC-z4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-0IGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKv4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;County_name&quot; IS NULL  THEN '' ELSE &quot;County_name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_clZGgIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_clZGgYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_clZGgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_clZGg4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_clZGhIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_clZGhYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_clZGhoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_clZGh4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_clZGiIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_clZGiYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_clZGioGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_clZGi4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_clZGjIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_clZGjYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_clZGjoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_clZGj4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cOC-0YGyEeqKnMyI8vv9TQ" computed="true" length="25">
          <parameters xmi:id="_cOC-0oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-04GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKuoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;County_name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;County_name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ckvmQIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_ckvmQYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_ckvmQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_ckvmQ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ckvmRIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ckvmRYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ckvmRoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ckvmR4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ckvmSIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ckvmSYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ckvmSoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ckvmS4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ckvmTIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ckvmTYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ckvmToGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cOC-1IGyEeqKnMyI8vv9TQ" computed="true" length="25">
          <parameters xmi:id="_cOC-1YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-1oGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKu4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;County_name&quot; IS NULL  THEN '' ELSE &quot;County_name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;County_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;County_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ck3iEIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_ck3iEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_ck3iEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_ck3iE4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ck3iFIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ck3iFYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ck3iFoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ck3iF4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ck3iGIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ck3iGYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_ck3iGoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ck3iG4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ck3iHIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ck3iHYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ck3iHoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ck3iH4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cOC-14GyEeqKnMyI8vv9TQ" computed="true" length="25">
          <parameters xmi:id="_cOC-2IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-2YGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKvIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;County_name&quot; IS NULL  THEN '' ELSE &quot;County_name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_clB6IIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_clB6IYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_clB6IoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_clB6I4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_clB6JIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_clB6JYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_clB6JoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_clB6J4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_clB6KIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_clB6KYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_clB6KoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_clB6K4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_clB6LIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_clB6LYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_clB6LoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_clB6L4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cOC-2oGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="138448.0">
          <parameters xmi:id="_cOC-24GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-3IGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKt4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;County_name&quot;)) )=0  THEN '' ELSE  &quot;County_name&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;County_name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ckV9oIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_ckV9oYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_ckV9ooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_ckV9o4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ckV9pIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ckV9pYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ckV9poGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ckV9p4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ckV9qIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ckV9qYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ckV9qoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ckV9q4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ckV9rIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ckV9rYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ckV9roGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cOC-3YGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="138448.0">
          <parameters xmi:id="_cOC-3oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-34GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKuIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;County_name&quot; IS NULL  THEN '' ELSE &quot;County_name&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;County_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;County_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ckfuoIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_ckfuoYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_ckfuooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_ckfuo4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ckfupIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ckfupYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ckfupoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ckfup4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ckfuqIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ckfuqYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ckfuqoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ckfuq4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ckfurIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ckfurYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ckfuroGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ckfur4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cOC-4IGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="138448.0">
          <parameters xmi:id="_cOC-4YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-4oGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodaIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKuYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;County_name&quot; IS NULL  THEN '' ELSE &quot;County_name&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;County_name&quot; IS NULL  THEN '' ELSE &quot;County_name&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cko4kIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_cko4kYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_cko4koGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cko4k4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cko4lIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cko4lYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cko4loGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cko4l4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cko4mIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cko4mYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cko4moGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cko4m4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cko4nIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cko4nYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cko4noGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cko4n4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC-5IGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-5YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjZoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_clf0MIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_clf0MYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_clf0MoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_clf0M4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC-5oGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-54GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKwIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Phone_number&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_clnI8IGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_clnI8YGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_clnI8oGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_clnI84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC-6IGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4718">
        <parameters xmi:id="_cOC-6YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKwYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Phone_number&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_clyvIIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_clyvIYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_clyvIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_clyvI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cOC-6oGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cOC-64GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKwoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Phone_number&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Phone_number&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cl9HMIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cl9HMYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cl9HMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cl9HM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cl9HNIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cl9HNYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cl9HNoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cl9HN4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cl9HOIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cl9HOYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cOC-7IGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4718">
        <parameters xmi:id="_cOC-7YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Phone_number&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Phone_number&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cmGRIIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cmGRIYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cmGRIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cmGRI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cmGRJIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cmGRJYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cmGRJoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cmGRJ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cmGRKIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cmGRKYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cOC-7oGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC-74GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKxIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Phone_number&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Phone_number&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cmPbEIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_cmPbEYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_cmPbEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_cmPbE4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_cmPbFIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cmPbFYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_cmPbFoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cmPbF4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cOC-8IGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cOC-8YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cOC-8oGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="227136.0">
          <parameters xmi:id="_cOC-84GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-9IGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKxYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Phone_number&quot;)), COUNT(&quot;Phone_number&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Phone_number&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Phone_number&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cmWv0IGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_cmWv0YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_cmWv0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cmWv04GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cmWv1IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cmWv1YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cmWv1oGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cmWv14GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cmWv2IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cmWv2YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cmWv2oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cmWv24GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cmWv3IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cmWv3YGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cmWv3oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cmWv34GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cOC-9YGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cOC-9oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-94GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKxoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Phone_number&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Phone_number&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Phone_number&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cmeEkIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_cmeEkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_cmeEkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cmeEk4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cmeElIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cmeElYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cmeEloGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cmeEl4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cmeEmIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cmeEmYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cmeEmoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cmeEm4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cmeEnIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cmeEnYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cmeEnoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cmeEn4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cOC--IGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cOC--YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC--oGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKx4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Phone_number&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Phone_number&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Phone_number&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cmpDsIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_cmpDsYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_cmpDsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cmpDs4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cmpDtIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cmpDtYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cmpDtoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cmpDt4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cmpDuIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cmpDuYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cmpDuoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cmpDu4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cmpDvIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cmpDvYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cmpDvoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cmpDv4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cOC--4GyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cOC-_IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC-_YGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxgIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Phone_number&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Phone_number&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cnq-cIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_cnq-cYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_cnq-coGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cnq-c4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cnq-dIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cnq-dYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cnq-doGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cnq-d4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cnq-eIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cnq-eYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cnq-eoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cnq-e4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cnq-fIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cnq-fYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cnq-foGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cOC-_oGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cOC-_4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC_AIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxgYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN '' ELSE &quot;Phone_number&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Phone_number&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cn2koIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_cn2koYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_cn2kooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cn2ko4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cn2kpIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cn2kpYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cn2kpoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cn2kp4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cn2kqIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cn2kqYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cn2kqoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cn2kq4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cn2krIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cn2krYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cn2kroGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cn2kr4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cOC_AYGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cOC_AoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC_A4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxgoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN '' ELSE &quot;Phone_number&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cn-gcIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_cn-gcYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_cn_HgIGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cn_HgYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cn_HgoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cn_Hg4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cn_HhIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cn_HhYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cn_HhoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cn_Hh4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cn_HiIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cn_HiYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cn_HioGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cn_Hi4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cn_HjIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cn_HjYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cOC_BIGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cOC_BYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC_BoGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKy4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Phone_number&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Phone_number&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cnNEYIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_cnNEYYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_cnNEYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cnNEY4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cnNEZIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cnNEZYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cnNEZoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cnNEZ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cnNEaIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cnNEaYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cnNEaoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cnNEa4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cnNEbIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cnNEbYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cnNEboGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cOC_B4GyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cOC_CIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC_CYGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKzIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN '' ELSE &quot;Phone_number&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Phone_number&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cnUZIIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_cnUZIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cnUZIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cnUZI4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cnUZJIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cnUZJYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cnUZJoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cnUZJ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cnUZKIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cnUZKYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_cnUZKoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cnUZK4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cnUZLIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cnUZLYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cnUZLoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cnUZL4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cOC_CoGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cOC_C4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC_DIGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKzYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN '' ELSE &quot;Phone_number&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cnf_UIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_cnf_UYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_cnf_UoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cnf_U4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cnf_VIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cnf_VYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cnf_VoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cnf_V4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cnf_WIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cnf_WYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cnf_WoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cnf_W4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cnf_XIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cnf_XYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cnf_XoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cnf_X4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cOC_DYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="227136.0">
          <parameters xmi:id="_cOC_DoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC_D4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKyIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Phone_number&quot;)) )=0  THEN '' ELSE  &quot;Phone_number&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Phone_number&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cmzbwIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cmzbwYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cmzbwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cmzbw4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cmzbxIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cmzbxYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cmzbxoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cmzbx4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cmzbyIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cmzbyYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cmzbyoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cmzby4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cmzbzIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cmzbzYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cmzbzoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cOC_EIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="227136.0">
          <parameters xmi:id="_cOC_EYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC_EoGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKyYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN '' ELSE &quot;Phone_number&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Phone_number&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Phone_number&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cm7-oIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cm7-oYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cm7-ooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cm7-o4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cm7-pIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cm7-pYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cm7-poGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cm7-p4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cm7-qIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cm7-qYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cm7-qoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cm7-q4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cm7-rIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cm7-rYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cm7-roGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cm7-r4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cOC_E4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="227136.0">
          <parameters xmi:id="_cOC_FIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cOC_FYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodbIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzKyoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Phone_number&quot; IS NULL  THEN '' ELSE &quot;Phone_number&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Phone_number&quot; IS NULL  THEN '' ELSE &quot;Phone_number&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cnFvoIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_cnFvoYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_cnFvooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cnFvo4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cnFvpIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cnFvpYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cnFvpoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cnFvp4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cnFvqIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cnFvqYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cnFvqoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cnFvq4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cnFvrIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cnFvrYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cnFvroGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cnFvr4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cOC_F4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC_GIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjYIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_coHDUIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_coHDUYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_coHDUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_coHDU4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cOC_GYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cOC_GoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxg4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment_Measure_ID&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_coPmMIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_coPmMYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_coPmMoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_coPmM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cOC_G4GyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4">
        <parameters xmi:id="_cOC_HIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxhIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Payment_Measure_ID&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_coalUIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_coalUYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_coalUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_coalU4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODkkIGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODkkYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxhYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment_Measure_ID&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Payment_Measure_ID&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_coh6EIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_coh6EYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_coh6EoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_coh6E4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_coh6FIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_coh6FYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_coh6FoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_coh6F4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_coh6GIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_coh6GYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODkkoGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4">
        <parameters xmi:id="_cODkk4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxhoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment_Measure_ID&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Payment_Measure_ID&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_copO0IGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_copO0YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_copO0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_copO04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_copO1IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_copO1YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_copO1oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_copO14GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_copO2IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_copO2YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cODklIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODklYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxh4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Payment_Measure_ID&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Payment_Measure_ID&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_coy_0IGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_coy_0YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_coy_0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_coy_04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_coy_1IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_coy_1YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_coy_1oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_coy_14GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cODkloGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODkl4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cODkmIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="179816.0">
          <parameters xmi:id="_cODkmYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODkmoGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxiIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Payment_Measure_ID&quot;)), COUNT(&quot;Payment_Measure_ID&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_co67oIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_co67oYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_co67ooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_co67o4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_co67pIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_co67pYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_co67poGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_co67p4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_co67qIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_co67qYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_co67qoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_co67q4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_co67rIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_co67rYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_co67roGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_co67r4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cODkm4GyEeqKnMyI8vv9TQ" computed="true" length="13">
          <parameters xmi:id="_cODknIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODknYGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxiYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Payment_Measure_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cpC3cIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_cpC3cYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_cpC3coGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cpC3c4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cpC3dIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cpC3dYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cpC3doGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cpC3d4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cpC3eIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cpC3eYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cpC3eoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cpC3e4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cpC3fIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cpC3fYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cpC3foGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cpC3f4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cODknoGyEeqKnMyI8vv9TQ" computed="true" length="8">
          <parameters xmi:id="_cODkn4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODkoIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxioGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Payment_Measure_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cpLaUIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_cpLaUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_cpLaUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cpLaU4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cpLaVIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cpLaVYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cpLaVoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cpLaV4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cpLaWIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cpLaWYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cpLaWoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cpLaW4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cpLaXIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cpLaXYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cpLaXoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cpLaX4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cODkoYGyEeqKnMyI8vv9TQ" computed="true" length="8">
          <parameters xmi:id="_cODkooGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODko4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxkYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Payment_Measure_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cqMG8IGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_cqMG8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_cqMG8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cqMG84GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cqMG9IGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cqMG9YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cqMG9oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cqMG94GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cqMG-IGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cqMG-YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cqMG-oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cqMG-4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cqMG_IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cqMG_YGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cqMG_oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cODkpIGyEeqKnMyI8vv9TQ" computed="true" length="8">
          <parameters xmi:id="_cODkpYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODkpoGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxkoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cqTbsIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_cqTbsYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_cqTbsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cqTbs4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cqTbtIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cqTbtYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cqTbtoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cqTbt4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cqTbuIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cqTbuYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cqTbuoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cqTbu4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cqTbvIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cqTbvYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cqTbvoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cqTbv4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cODkp4GyEeqKnMyI8vv9TQ" computed="true" length="8">
          <parameters xmi:id="_cODkqIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODkqYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxk4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cqcloIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_cqcloYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_cqclooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cqclo4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cqclpIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cqclpYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cqclpoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cqclp4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cqclqIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cqclqYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cqclqoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cqclq4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cqclrIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cqclrYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cqclroGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cqclr4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cODkqoGyEeqKnMyI8vv9TQ" computed="true" length="13">
          <parameters xmi:id="_cODkq4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODkrIGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxjoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Payment_Measure_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cpxQMIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_cpxQMYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_cpxQMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cpxQM4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cpxQNIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cpxQNYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cpxQNoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cpxQN4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cpxQOIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cpxQOYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cpxQOoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cpxQO4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cpxQPIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cpxQPYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cpxQPoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cODkrYGyEeqKnMyI8vv9TQ" computed="true" length="13">
          <parameters xmi:id="_cODkroGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODkr4GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxj4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cp4k8IGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_cp4k8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cp4k8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cp4k84GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cp4k9IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cp4k9YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cp4k9oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cp4k94GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cp4k-IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cp4k-YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_cp4k-oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cp4k-4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cp4k_IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cp4k_YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cp4k_oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cp4k_4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cODksIGyEeqKnMyI8vv9TQ" computed="true" length="13">
          <parameters xmi:id="_cODksYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODksoGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxkIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cqELIIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_cqELIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_cqELIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cqELI4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cqELJIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cqELJYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cqELJoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cqELJ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cqELKIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cqELKYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cqELKoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cqELK4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cqELLIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cqELLYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cqELLoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cqELL4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cODks4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="179816.0">
          <parameters xmi:id="_cODktIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODktYGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxi4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Payment_Measure_ID&quot;)) )=0  THEN '' ELSE  &quot;Payment_Measure_ID&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cpXAgIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cpXAgYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cpXAgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cpXAg4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cpXAhIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cpXAhYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cpXAhoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cpXAh4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cpXAiIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cpXAiYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cpXAioGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cpXAi4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cpXAjIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cpXAjYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cpXAjoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cODktoGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="179816.0">
          <parameters xmi:id="_cODkt4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODkuIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxjIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_ID&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cpe8UIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cpe8UYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cpe8UoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cpe8U4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cpe8VIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cpe8VYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cpe8VoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cpe8V4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cpe8WIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cpe8WYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cpe8WoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cpe8W4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cpe8XIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cpe8XYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cpe8XoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cpe8X4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cODkuYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="179816.0">
          <parameters xmi:id="_cODkuoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODku4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodcIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxjYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_ID&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Payment_Measure_ID&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_ID&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cppUYIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_cppUYYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_cppUYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cppUY4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cppUZIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cppUZYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cppUZoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cppUZ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cppUaIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cppUaYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cppUaoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cppUa4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cppUbIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cppUbYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cppUboGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cppUb4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODkvYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODkvoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjZYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cqkhcIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cqkhcYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cqkhcoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cqkhc4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODkv4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODkwIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxlIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment_Measure_Name&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cqsdQIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_cqsdQYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_cqsdQoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_cqsdQ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODkwYGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4">
        <parameters xmi:id="_cODkwoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxlYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Payment_Measure_Name&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cq4DcIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_cq4DcYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_cq4DcoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_cq4Dc4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODkw4GyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODkxIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxloGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment_Measure_Name&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Payment_Measure_Name&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cq_YMIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cq_YMYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cq_YMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cq_YM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cq_YNIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cq_YNYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cq_YNoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cq_YN4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cq_YOIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cq_YOYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODkxYGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4">
        <parameters xmi:id="_cODkxoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxl4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment_Measure_Name&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Payment_Measure_Name&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_crHUAIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_crHUAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_crHUAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_crHUA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_crHUBIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_crHUBYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_crHUBoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_crHUB4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_crHUCIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_crHUCYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cODkx4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODkyIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxmIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Payment_Measure_Name&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Payment_Measure_Name&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_crQd8IGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_crQd8YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_crQd8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_crQd84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_crQd9IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_crQd9YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_crQd9oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_crQd94GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cODkyYGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODkyoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cODky4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="653016.0">
          <parameters xmi:id="_cODkzIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODkzYGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxmYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Payment_Measure_Name&quot;)), COUNT(&quot;Payment_Measure_Name&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_Name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_crXysIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_crXysYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_crXysoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_crXys4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_crXytIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_crXytYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_crXytoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_crXyt4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_crXyuIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_crXyuYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_crXyuoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_crXyu4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_crXyvIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_crXyvYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_crXyvoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_crXyv4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cODkzoGyEeqKnMyI8vv9TQ" computed="true" length="41">
          <parameters xmi:id="_cODkz4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk0IGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxmoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Payment_Measure_Name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_Name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_crfugIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_crfugYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_crfugoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_crfug4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_crfuhIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_crfuhYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_crfuhoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_crfuh4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_crfuiIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_crfuiYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_crfuioGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_crfui4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_crfujIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_crfujYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_crfujoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_crfuj4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cODk0YGyEeqKnMyI8vv9TQ" computed="true" length="30">
          <parameters xmi:id="_cODk0oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk04GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxm4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Payment_Measure_Name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_Name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_crqGkIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_crqGkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_crqGkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_crqGk4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_crqGlIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_crqGlYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_crqGloGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_crqGl4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_crqGmIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_crqGmYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_crqGmoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_crqGm4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_crqGnIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_crqGnYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_crqGnoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_crqGn4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cODk1IGyEeqKnMyI8vv9TQ" computed="true" length="30">
          <parameters xmi:id="_cODk1YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk1oGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxooGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Payment_Measure_Name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_Name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_csnv4IGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_csnv4YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_csnv4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_csnv44GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_csnv5IGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_csnv5YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_csnv5oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_csnv54GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_csnv6IGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_csnv6YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_csnv6oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_csnv64GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_csnv7IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_csnv7YGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_csnv7oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cODk14GyEeqKnMyI8vv9TQ" computed="true" length="30">
          <parameters xmi:id="_cODk2IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk2YGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxo4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_Name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_csxg4IGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_csxg4YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_csxg4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_csxg44GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_csxg5IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_csxg5YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_csxg5oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_csxg54GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_csxg6IGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_csxg6YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_csxg6oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_csxg64GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_csxg7IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_csxg7YGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_csxg7oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_csxg74GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cODk2oGyEeqKnMyI8vv9TQ" computed="true" length="30">
          <parameters xmi:id="_cODk24GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk3IGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxpIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_Name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cs5csIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_cs5csYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_cs5csoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cs5cs4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cs5ctIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cs5ctYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cs5ctoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cs5ct4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cs5cuIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cs5cuYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cs5cuoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cs5cu4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cs5cvIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cs5cvYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cs5cvoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cs5cv4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cODk3YGyEeqKnMyI8vv9TQ" computed="true" length="41">
          <parameters xmi:id="_cODk3oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk34GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxn4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Payment_Measure_Name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_Name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_csMSEIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_csMSEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_csMSEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_csMSE4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_csMSFIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_csMSFYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_csMSFoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_csMSF4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_csMSGIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_csMSGYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_csMSGoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_csMSG4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_csMSHIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_csMSHYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_csMSHoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cODk4IGyEeqKnMyI8vv9TQ" computed="true" length="41">
          <parameters xmi:id="_cODk4YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk4oGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxoIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_Name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_csUN4IGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_csUN4YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_csUN4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_csUN44GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_csUN5IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_csUN5YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_csUN5oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_csUN54GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_csUN6IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_csUN6YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_csUN6oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_csUN64GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_csUN7IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_csUN7YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_csUN7oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_csUN74GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cODk44GyEeqKnMyI8vv9TQ" computed="true" length="41">
          <parameters xmi:id="_cODk5IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk5YGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxoYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_Name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_csf0EIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_csf0EYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_csf0EoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_csf0E4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_csf0FIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_csf0FYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_csf0FoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_csf0F4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_csf0GIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_csf0GYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_csf0GoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_csf0G4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_csf0HIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_csf0HYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_csf0HoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_csf0H4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cODk5oGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="653016.0">
          <parameters xmi:id="_cODk54GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk6IGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxnIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Payment_Measure_Name&quot;)) )=0  THEN '' ELSE  &quot;Payment_Measure_Name&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_Measure_Name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cryCYIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cryCYYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cryCYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cryCY4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cryCZIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cryCZYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cryCZoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cryCZ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cryCaIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cryCaYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cryCaoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cryCa4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cryCbIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cryCbYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cryCboGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cODk6YGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="653016.0">
          <parameters xmi:id="_cODk6oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk64GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxnYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_Name&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_Measure_Name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cr5-MIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cr5-MYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cr5-MoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cr5-M4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cr5-NIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cr5-NYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cr5-NoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cr5-N4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cr5-OIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cr5-OYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cr5-OoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cr5-O4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cr5-PIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cr5-PYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cr5-PoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cr5-P4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cODk7IGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="653016.0">
          <parameters xmi:id="_cODk7YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODk7oGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYoddIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxnoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_Name&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Payment_Measure_Name&quot; IS NULL  THEN '' ELSE &quot;Payment_Measure_Name&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_csDIIIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_csDIIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_csDIIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_csDII4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_csDIJIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_csDIJYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_csDIJoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_csDIJ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_csDIKIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_csDIKYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_csDIKoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_csDIK4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_csDILIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_csDILYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_csDILoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_csDIL4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODk8IGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODk8YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjYYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ctB_kIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_ctB_kYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_ctB_koGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_ctB_k4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODk8oGyEeqKnMyI8vv9TQ" count="18928" nullCount="2904" computed="true">
        <parameters xmi:id="_cODk84GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxpYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment_category&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ctM-sIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_ctM-sYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_ctM-soGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_ctM-s4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODk9IGyEeqKnMyI8vv9TQ" count="18928" nullCount="2904" computed="true" distinctValueCount="5">
        <parameters xmi:id="_cODk9YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxpoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Payment_category&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ctU6gIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_ctU6gYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_ctU6goGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_ctU6g4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODk9oGyEeqKnMyI8vv9TQ" count="18928" nullCount="2904" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODk94GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxp4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment_category&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Payment_category&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ctergIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_ctergYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_ctergoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cterg4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cterhIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cterhYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cterhoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cterh4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cteriIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cteriYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODk-IGyEeqKnMyI8vv9TQ" count="18928" nullCount="2904" computed="true" duplicateValueCount="5">
        <parameters xmi:id="_cODk-YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxqIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment_category&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Payment_category&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ctmnUIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_ctmnUYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_ctmnUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_ctmnU4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_ctmnVIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_ctmnVYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_ctmnVoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_ctmnV4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_ctmnWIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_ctmnWYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cODk-oGyEeqKnMyI8vv9TQ" count="18928" nullCount="2904" computed="true">
        <parameters xmi:id="_cODk-4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxqYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Payment_category&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Payment_category&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_ctvKMIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_ctvKMYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_ctvKMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_ctvKM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_ctvKNIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_ctvKNYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_ctvKNoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_ctvKN4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cODk_IGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODk_YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cODk_oGyEeqKnMyI8vv9TQ" count="16024" nullCount="2904" computed="true" sumLength="628639.0">
          <parameters xmi:id="_cODk_4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlAIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxqoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Payment_category&quot;)), COUNT(&quot;Payment_category&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_category&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_ct8lkIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_ct8lkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_ct8lkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_ct8lk4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_ct8llIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_ct8llYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_ct8lloGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_ct8ll4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_ct8lmIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_ct8lmYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_ct8lmoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_ct8lm4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_ct8lnIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_ct8lnYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_ct8lnoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_ct8ln4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cODlAYGyEeqKnMyI8vv9TQ" nullCount="2904" computed="true" length="46">
          <parameters xmi:id="_cODlAoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlA4GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxq4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Payment_category&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_category&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cuGWkIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_cuGWkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_cuGWkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cuGWk4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cuGWlIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cuGWlYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cuGWloGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cuGWl4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cuGWmIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cuGWmYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_cuGWmoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cuGWm4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cuGWnIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cuGWnYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cuGWnoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cuGWn4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cODlBIGyEeqKnMyI8vv9TQ" nullCount="2904" computed="true" length="25">
          <parameters xmi:id="_cODlBYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlBoGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxrIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Payment_category&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_category&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cuQuoIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_cuQuoYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_cuQuooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cuQuo4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cuQupIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cuQupYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cuQupoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cuQup4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cuQuqIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cuQuqYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cuQuqoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cuQuq4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cuQurIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cuQurYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cuQuroGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cuQur4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cODlB4GyEeqKnMyI8vv9TQ" nullCount="2904" computed="true" length="25">
          <parameters xmi:id="_cODlCIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlCYGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxs4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Payment_category&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_category&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cvQ0MIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_cvQ0MYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_cvQ0MoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cvQ0M4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cvQ0NIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cvQ0NYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cvQ0NoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cvQ0N4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cvQ0OIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cvQ0OYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cvQ0OoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cvQ0O4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cvQ0PIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cvQ0PYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cvQ0PoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cODlCoGyEeqKnMyI8vv9TQ" nullCount="2904" computed="true" length="0">
          <parameters xmi:id="_cODlC4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlDIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxtIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN '' ELSE &quot;Payment_category&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cve2oIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_cve2oYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_cve2ooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cve2o4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cve2pIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cve2pYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cve2poGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cve2p4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cve2qIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cve2qYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cve2qoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cve2q4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cve2rIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cve2rYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cve2roGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cve2r4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cODlDYGyEeqKnMyI8vv9TQ" nullCount="2904" computed="true" length="0">
          <parameters xmi:id="_cODlDoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlD4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxtYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN '' ELSE &quot;Payment_category&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cvoAkIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_cvoAkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_cvoAkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_cvoAk4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cvoAlIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cvoAlYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cvoAloGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cvoAl4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cvoAmIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cvoAmYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cvoAmoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cvoAm4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cvoAnIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cvoAnYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cvoAnoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cvoAn4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cODlEIGyEeqKnMyI8vv9TQ" nullCount="2904" computed="true" length="46">
          <parameters xmi:id="_cODlEYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlEoGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxsIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Payment_category&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_category&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cu1WYIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_cu1WYYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_cu1WYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cu1WY4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cu1WZIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cu1WZYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cu1WZoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cu1WZ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cu1WaIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cu1WaYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cu1WaoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cu1Wa4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cu1WbIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cu1WbYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cu1WboGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cODlE4GyEeqKnMyI8vv9TQ" nullCount="2904" computed="true" length="46">
          <parameters xmi:id="_cODlFIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlFYGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxsYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN '' ELSE &quot;Payment_category&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cvAVgIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_cvAVgYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cvAVgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cvAVg4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cvAVhIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cvAVhYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cvAVhoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cvAVh4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cvAViIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cvAViYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_cvAVioGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cvAVi4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cvAVjIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cvAVjYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cvAVjoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cvAVj4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cODlFoGyEeqKnMyI8vv9TQ" nullCount="2904" computed="true" length="46">
          <parameters xmi:id="_cODlF4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlGIGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxsoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN '' ELSE &quot;Payment_category&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cvIRUIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_cvIRUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_cvIRUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_cvIRU4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cvIRVIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cvIRVYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cvIRVoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cvIRV4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cvIRWIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cvIRWYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cvIRWoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cvIRW4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cvIRXIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cvIRXYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cvIRXoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cvIRX4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cODlGYGyEeqKnMyI8vv9TQ" count="16024" nullCount="2904" computed="true" sumLength="628639.0">
          <parameters xmi:id="_cODlGoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlG4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxrYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Payment_category&quot;)) )=0  THEN '' ELSE  &quot;Payment_category&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Payment_category&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cuZRgIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_cuZRgYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_cuZRgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cuZRg4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cuZRhIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cuZRhYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cuZRhoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cuZRh4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cuZRiIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cuZRiYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cuZRioGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cuZRi4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cuZRjIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cuZRjYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cuZRjoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cODlHIGyEeqKnMyI8vv9TQ" count="18928" nullCount="2904" computed="true" sumLength="628639.0">
          <parameters xmi:id="_cODlHYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlHoGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxroGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN '' ELSE &quot;Payment_category&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Payment_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Payment_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cuh0YIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_cuh0YYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_cuh0YoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cuh0Y4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cuh0ZIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cuh0ZYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cuh0ZoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cuh0Z4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cuh0aIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cuh0aYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cuh0aoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cuh0a4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cuh0bIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cuh0bYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cuh0boGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cuh0b4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cODlH4GyEeqKnMyI8vv9TQ" count="18928" nullCount="2904" computed="true" sumLength="628639.0">
          <parameters xmi:id="_cODlIIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlIYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodeIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxr4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Payment_category&quot; IS NULL  THEN '' ELSE &quot;Payment_category&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Payment_category&quot; IS NULL  THEN '' ELSE &quot;Payment_category&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cutakIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_cutakYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_cutakoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_cutak4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cutalIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cutalYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_cutaloGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_cutal4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_cutamIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_cutamYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_cutamoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cutam4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cutanIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_cutanYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cutanoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_cutan4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODlI4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODlJIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjd4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cvxxkIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cvxxkYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cvxxkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cvxxk4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODlJYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true">
        <parameters xmi:id="_cODlJoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxtoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Denominator&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cv8JoIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_cv8JoYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_cv8JooGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_cv8Jo4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODlJ4GyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" distinctValueCount="1257">
        <parameters xmi:id="_cODlKIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxt4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Denominator&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cwI98IGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_cwI98YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_cwI98oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_cwI984GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODlKYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" uniqueValueCount="349">
        <parameters xmi:id="_cODlKoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxuIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Denominator&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Denominator&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cwVLMIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cwVLMYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cwVLMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cwVLM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cwVLNIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cwVLNYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cwVLNoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cwVLN4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cwVLOIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cwVLOYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODlK4GyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" duplicateValueCount="908">
        <parameters xmi:id="_cODlLIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxuYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Denominator&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Denominator&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cwdHAIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cwdHAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cwdHAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cwdHA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cwdHBIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cwdHBYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cwdHBoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cwdHB4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cwdHCIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cwdHCYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BoxIndicator" xmi:id="_cODlLYGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODlLoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Summary_Statistics_0.1.definition#_ccI48BF2Ed2PKb6nEJEvhw"/>
        <IQR xmi:id="_cODlL4GyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Inter_Quartile_Range_0.1.definition#_ccI48xF2Ed2PKb6nEJEvhw"/>
          <lowerValue xsi:type="dataquality.indicators:LowerQuartileIndicator" xmi:id="_cODlMIGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="76.0" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Lower_Quartile_0.1.definition#_ccI49BF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHREgIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Denominator&quot; FROM (SELECT TOP 3081 &quot;Denominator&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Denominator&quot; IS NOT NULL  ORDER BY &quot;Denominator&quot; ASC ) AS FOO ORDER BY &quot;Denominator&quot; DESC ) AS BAR ORDER BY &quot;Denominator&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_cxMG0IGyEeqKnMyI8vv9TQ" name="Lower Quartile" label="Lower Quartile">
              <taggedValue xmi:id="_cxMG0YGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are below this value and 3/4th are above"/>
              <taggedValue xmi:id="_cxMG0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the lowest 1/4th records"/>
              <sqlGenericExpression xmi:id="_cxMG04GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  3* SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*(SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_cxMG1IGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_cxMG1YGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_cxMG1oGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE (NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) /4) +1) " language="DB2"/>
              <sqlGenericExpression xmi:id="_cxMG14GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_cxMG2IGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xsi:type="dataquality.indicators:UpperQuartileIndicator" xmi:id="_cODlMYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="384.0" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Upper_Quartile_0.1.definition#_ccI49RF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHaOcIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Denominator&quot; FROM (SELECT TOP 9243 &quot;Denominator&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Denominator&quot; IS NOT NULL  ORDER BY &quot;Denominator&quot; ASC ) AS FOO ORDER BY &quot;Denominator&quot; DESC ) AS BAR ORDER BY &quot;Denominator&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_cxWe4IGyEeqKnMyI8vv9TQ" name="Upper Quartile" label="Upper Quartile">
              <taggedValue xmi:id="_cxWe4YGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are above this value and 3/4th are below"/>
              <taggedValue xmi:id="_cxWe4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the highest 1/4th records"/>
              <sqlGenericExpression xmi:id="_cxWe44GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) ) AND 3 * SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)  &lt;= ( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_cxWe5IGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_cxWe5YGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_cxWe5oGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE ( NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>)*3 /4) +1 ) " language="DB2"/>
              <sqlGenericExpression xmi:id="_cxWe54GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_cxWe6IGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </IQR>
        <rangeIndicator xmi:id="_cODlMoGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
          <lowerValue xmi:id="_cODlM4GyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="25" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHDCEYGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Denominator&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_cw3WsIGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
              <taggedValue xmi:id="_cw3WsYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
              <taggedValue xmi:id="_cw3WsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
              <sqlGenericExpression xmi:id="_cw3Ws4GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xmi:id="_cODlNIGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="9166" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHDpIIGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Denominator&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_cxC84IGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
              <taggedValue xmi:id="_cxC84YGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
              <taggedValue xmi:id="_cxC84oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
              <sqlGenericExpression xmi:id="_cxC844GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </rangeIndicator>
        <meanIndicator xmi:id="_cODlNYGyEeqKnMyI8vv9TQ" count="12323" nullCount="6605" computed="true" sumStr="3509710">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Mean_0.1.definition#_ccI48RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGzxuoGyEeqKnMyI8vv9TQ" body="SELECT SUM(&quot;Denominator&quot;), COUNT(&quot;Denominator&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cwnfEIGyEeqKnMyI8vv9TQ" name="Mean" label="Mean">
            <taggedValue xmi:id="_cwnfEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the mean (average) of the records"/>
            <taggedValue xmi:id="_cwnfEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the mean value of numerical records"/>
            <sqlGenericExpression xmi:id="_cwnfE4GyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cwnfFIGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_cwnfFYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cwnfFoGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cwnfF4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CAST (&lt;%=__COLUMN_NAMES__%> AS REAL)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cwnfGIGyEeqKnMyI8vv9TQ" body="SELECT SUM(double(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
          </builtInIndicatorDefinition>
        </meanIndicator>
        <medianIndicator xmi:id="_cODlNoGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" median="180.0">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodfIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Median_0.1.definition#_ccI48hF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHDCEIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Denominator&quot; FROM (SELECT TOP 6162 &quot;Denominator&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Denominator&quot; IS NOT NULL  ORDER BY &quot;Denominator&quot; ASC ) AS FOO ORDER BY &quot;Denominator&quot; DESC ) AS BAR" language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cwuz0IGyEeqKnMyI8vv9TQ" name="Median" label="Median">
            <taggedValue xmi:id="_cwuz0YGyEeqKnMyI8vv9TQ" tag="Description" value="The median is the value separating the higher half of a sample, a population or a probability distribution from the lower half"/>
            <taggedValue xmi:id="_cwuz0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the median of the records"/>
            <sqlGenericExpression xmi:id="_cwuz04GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
            <sqlGenericExpression xmi:id="_cwuz1IGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_cwuz1YGyEeqKnMyI8vv9TQ" body="SELECT AVG(&lt;%=__COLUMN_NAMES__%>) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cwuz1oGyEeqKnMyI8vv9TQ" body="SELECT MEDIAN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="10"/>
            <sqlGenericExpression xmi:id="_cwuz14GyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="9"/>
            <sqlGenericExpression xmi:id="_cwuz2IGyEeqKnMyI8vv9TQ" body="SELECT AVG(double(&lt;%=__COLUMN_NAMES__%>)) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="DB2"/>
            <sqlGenericExpression xmi:id="_cwuz2YGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cwuz2oGyEeqKnMyI8vv9TQ" body="SELECT AVG(cast (&lt;%=__COLUMN_NAMES__%> AS NUMERIC)) FROM (SELECT distinct &lt;%=__COLUMN_NAMES__%> FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) STT WHERE (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) AS SOU WHERE SOU.&lt;%=__COLUMN_NAMES__%> &lt;= STT.&lt;%=__COLUMN_NAMES__%>) AND (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%>) AS SUR WHERE SUR.&lt;%=__COLUMN_NAMES__%> >= STT.&lt;%=__COLUMN_NAMES__%>) ) T" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cwuz24GyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR" language="Microsoft SQL Server"/>
          </builtInIndicatorDefinition>
        </medianIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODlOIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODlOYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjcYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cxfBwIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_cxfBwYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_cxfBwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_cxfBw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODlOoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true">
        <parameters xmi:id="_cODlO4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHaOcYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cxnkoIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_cxnkoYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_cxnkooGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_cxnko4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODlPIGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" distinctValueCount="7538">
        <parameters xmi:id="_cODlPYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHaOcoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Payment&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cxzK0IGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_cxzK0YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_cxzK0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_cxzK04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODlPoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" uniqueValueCount="4480">
        <parameters xmi:id="_cODlP4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHaOc4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Payment&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cx7GoIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_cx7GoYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_cx7GooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_cx7Go4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cx7GpIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cx7GpYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cx7GpoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cx7Gp4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cx7GqIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cx7GqYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODlQIGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" duplicateValueCount="3058">
        <parameters xmi:id="_cODlQYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHaOdIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Payment&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cyGs0IGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cyGs0YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cyGs0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cyGs04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cyGs1IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cyGs1YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cyGs1oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cyGs14GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cyGs2IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cyGs2YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BoxIndicator" xmi:id="_cODlQoGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODlQ4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Summary_Statistics_0.1.definition#_ccI48BF2Ed2PKb6nEJEvhw"/>
        <IQR xmi:id="_cODlRIGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Inter_Quartile_Range_0.1.definition#_ccI48xF2Ed2PKb6nEJEvhw"/>
          <lowerValue xsi:type="dataquality.indicators:LowerQuartileIndicator" xmi:id="_cODlRYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="17101.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Lower_Quartile_0.1.definition#_ccI49BF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHr7QIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Payment&quot; FROM (SELECT TOP 3081 &quot;Payment&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment&quot; IS NOT NULL  ORDER BY &quot;Payment&quot; ASC ) AS FOO ORDER BY &quot;Payment&quot; DESC ) AS BAR ORDER BY &quot;Payment&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_cy26wIGyEeqKnMyI8vv9TQ" name="Lower Quartile" label="Lower Quartile">
              <taggedValue xmi:id="_cy26wYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are below this value and 3/4th are above"/>
              <taggedValue xmi:id="_cy26woGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the lowest 1/4th records"/>
              <sqlGenericExpression xmi:id="_cy26w4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  3* SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*(SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_cy26xIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_cy26xYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_cy26xoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE (NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) /4) +1) " language="DB2"/>
              <sqlGenericExpression xmi:id="_cy26x4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_cy26yIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xsi:type="dataquality.indicators:UpperQuartileIndicator" xmi:id="_cODlRoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="22143.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Upper_Quartile_0.1.definition#_ccI49RF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH1FMIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Payment&quot; FROM (SELECT TOP 9243 &quot;Payment&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment&quot; IS NOT NULL  ORDER BY &quot;Payment&quot; ASC ) AS FOO ORDER BY &quot;Payment&quot; DESC ) AS BAR ORDER BY &quot;Payment&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_czAEsIGyEeqKnMyI8vv9TQ" name="Upper Quartile" label="Upper Quartile">
              <taggedValue xmi:id="_czAEsYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are above this value and 3/4th are below"/>
              <taggedValue xmi:id="_czAEsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the highest 1/4th records"/>
              <sqlGenericExpression xmi:id="_czAEs4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) ) AND 3 * SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)  &lt;= ( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_czAEtIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_czAEtYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_czAEtoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE ( NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>)*3 /4) +1 ) " language="DB2"/>
              <sqlGenericExpression xmi:id="_czAEt4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_czAEuIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </IQR>
        <rangeIndicator xmi:id="_cODlR4GyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
          <lowerValue xmi:id="_cODlSIGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="10623.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHjYYYGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Payment&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_cyj_0IGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
              <taggedValue xmi:id="_cyj_0YGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
              <taggedValue xmi:id="_cyj_0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
              <sqlGenericExpression xmi:id="_cyj_04GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xmi:id="_cODlSYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="44945.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHjYYoGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Payment&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_cysisIGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
              <taggedValue xmi:id="_cysisYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
              <taggedValue xmi:id="_cysisoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
              <sqlGenericExpression xmi:id="_cysis4GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </rangeIndicator>
        <meanIndicator xmi:id="_cODlSoGyEeqKnMyI8vv9TQ" count="12323" nullCount="6605" computed="true" sumStr="2.42528944E8">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Mean_0.1.definition#_ccI48RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHaOdYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&quot;Payment&quot;), COUNT(&quot;Payment&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cyP2wIGyEeqKnMyI8vv9TQ" name="Mean" label="Mean">
            <taggedValue xmi:id="_cyP2wYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the mean (average) of the records"/>
            <taggedValue xmi:id="_cyP2woGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the mean value of numerical records"/>
            <sqlGenericExpression xmi:id="_cyP2w4GyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_cyP2xIGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_cyP2xYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cyP2xoGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cyP2x4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CAST (&lt;%=__COLUMN_NAMES__%> AS REAL)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_cyP2yIGyEeqKnMyI8vv9TQ" body="SELECT SUM(double(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
          </builtInIndicatorDefinition>
        </meanIndicator>
        <medianIndicator xmi:id="_cODlS4GyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" median="18734.0">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodgIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Median_0.1.definition#_ccI48hF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dHjYYIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Payment&quot; FROM (SELECT TOP 6162 &quot;Payment&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment&quot; IS NOT NULL  ORDER BY &quot;Payment&quot; ASC ) AS FOO ORDER BY &quot;Payment&quot; DESC ) AS BAR" language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_cyYZoIGyEeqKnMyI8vv9TQ" name="Median" label="Median">
            <taggedValue xmi:id="_cyYZoYGyEeqKnMyI8vv9TQ" tag="Description" value="The median is the value separating the higher half of a sample, a population or a probability distribution from the lower half"/>
            <taggedValue xmi:id="_cyYZooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the median of the records"/>
            <sqlGenericExpression xmi:id="_cyYZo4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
            <sqlGenericExpression xmi:id="_cyYZpIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_cyYZpYGyEeqKnMyI8vv9TQ" body="SELECT AVG(&lt;%=__COLUMN_NAMES__%>) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="Oracle"/>
            <sqlGenericExpression xmi:id="_cyYZpoGyEeqKnMyI8vv9TQ" body="SELECT MEDIAN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="10"/>
            <sqlGenericExpression xmi:id="_cyYZp4GyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="9"/>
            <sqlGenericExpression xmi:id="_cyYZqIGyEeqKnMyI8vv9TQ" body="SELECT AVG(double(&lt;%=__COLUMN_NAMES__%>)) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="DB2"/>
            <sqlGenericExpression xmi:id="_cyYZqYGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_cyYZqoGyEeqKnMyI8vv9TQ" body="SELECT AVG(cast (&lt;%=__COLUMN_NAMES__%> AS NUMERIC)) FROM (SELECT distinct &lt;%=__COLUMN_NAMES__%> FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) STT WHERE (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) AS SOU WHERE SOU.&lt;%=__COLUMN_NAMES__%> &lt;= STT.&lt;%=__COLUMN_NAMES__%>) AND (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%>) AS SUR WHERE SUR.&lt;%=__COLUMN_NAMES__%> >= STT.&lt;%=__COLUMN_NAMES__%>) ) T" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_cyYZq4GyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR" language="Microsoft SQL Server"/>
          </builtInIndicatorDefinition>
        </medianIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODlTYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODlToGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjaIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_czLq4IGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_czLq4YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_czLq4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_czLq44GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODlT4GyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true">
        <parameters xmi:id="_cODlUIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH1FMYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Lower_estimate&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_czbigIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_czbigYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_czbigoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_czbig4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODlUYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" distinctValueCount="7656">
        <parameters xmi:id="_cODlUoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH1FMoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Lower_estimate&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_czlTgIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_czlTgYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_czlTgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_czlTg4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODlU4GyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" uniqueValueCount="4452">
        <parameters xmi:id="_cODlVIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH1FM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Lower_estimate&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Lower_estimate&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_czvrkIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_czvrkYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_czvrkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_czvrk4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_czvrlIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_czvrlYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_czvrloGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_czvrl4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_czvrmIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_czvrmYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODlVYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" duplicateValueCount="3204">
        <parameters xmi:id="_cODlVoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH1FNIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Lower_estimate&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Lower_estimate&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_cz4OcIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_cz4OcYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_cz4OcoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_cz4Oc4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_cz4OdIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_cz4OdYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_cz4OdoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_cz4Od4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_cz4OeIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_cz4OeYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BoxIndicator" xmi:id="_cODlV4GyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODlWIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Summary_Statistics_0.1.definition#_ccI48BF2Ed2PKb6nEJEvhw"/>
        <IQR xmi:id="_cODlWYGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Inter_Quartile_Range_0.1.definition#_ccI48xF2Ed2PKb6nEJEvhw"/>
          <lowerValue xsi:type="dataquality.indicators:LowerQuartileIndicator" xmi:id="_cODlWoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="15581.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Lower_Quartile_0.1.definition#_ccI49BF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIGyAIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Lower_estimate&quot; FROM (SELECT TOP 3081 &quot;Lower_estimate&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Lower_estimate&quot; IS NOT NULL  ORDER BY &quot;Lower_estimate&quot; ASC ) AS FOO ORDER BY &quot;Lower_estimate&quot; DESC ) AS BAR ORDER BY &quot;Lower_estimate&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c0rfsIGyEeqKnMyI8vv9TQ" name="Lower Quartile" label="Lower Quartile">
              <taggedValue xmi:id="_c0rfsYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are below this value and 3/4th are above"/>
              <taggedValue xmi:id="_c0rfsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the lowest 1/4th records"/>
              <sqlGenericExpression xmi:id="_c0rfs4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  3* SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*(SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_c0rftIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_c0rftYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_c0rftoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE (NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) /4) +1) " language="DB2"/>
              <sqlGenericExpression xmi:id="_c0rft4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_c0rfuIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xsi:type="dataquality.indicators:UpperQuartileIndicator" xmi:id="_cODlW4GyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="20577.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Upper_Quartile_0.1.definition#_ccI49RF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIPU4IGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Lower_estimate&quot; FROM (SELECT TOP 9243 &quot;Lower_estimate&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Lower_estimate&quot; IS NOT NULL  ORDER BY &quot;Lower_estimate&quot; ASC ) AS FOO ORDER BY &quot;Lower_estimate&quot; DESC ) AS BAR ORDER BY &quot;Lower_estimate&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c00poIGyEeqKnMyI8vv9TQ" name="Upper Quartile" label="Upper Quartile">
              <taggedValue xmi:id="_c00poYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are above this value and 3/4th are below"/>
              <taggedValue xmi:id="_c00pooGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the highest 1/4th records"/>
              <sqlGenericExpression xmi:id="_c00po4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) ) AND 3 * SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)  &lt;= ( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_c00ppIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_c00ppYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_c00ppoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE ( NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>)*3 /4) +1 ) " language="DB2"/>
              <sqlGenericExpression xmi:id="_c00pp4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_c00pqIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </IQR>
        <rangeIndicator xmi:id="_cODlXIGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
          <lowerValue xmi:id="_cODlXYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="9000.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH-PIYGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Lower_estimate&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c0XWoIGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
              <taggedValue xmi:id="_c0XWoYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
              <taggedValue xmi:id="_c0XWooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
              <sqlGenericExpression xmi:id="_c0XWo4GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xmi:id="_cODlXoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="38974.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH-PIoGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Lower_estimate&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c0iVwIGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
              <taggedValue xmi:id="_c0iVwYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
              <taggedValue xmi:id="_c0iVwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
              <sqlGenericExpression xmi:id="_c0iVw4GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </rangeIndicator>
        <meanIndicator xmi:id="_cODlX4GyEeqKnMyI8vv9TQ" count="12323" nullCount="6605" computed="true" sumStr="2.22612029E8">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Mean_0.1.definition#_ccI48RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH1FNYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&quot;Lower_estimate&quot;), COUNT(&quot;Lower_estimate&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c0BYYIGyEeqKnMyI8vv9TQ" name="Mean" label="Mean">
            <taggedValue xmi:id="_c0BYYYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the mean (average) of the records"/>
            <taggedValue xmi:id="_c0BYYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the mean value of numerical records"/>
            <sqlGenericExpression xmi:id="_c0BYY4GyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c0BYZIGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_c0BYZYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c0BYZoGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c0BYZ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CAST (&lt;%=__COLUMN_NAMES__%> AS REAL)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c0BYaIGyEeqKnMyI8vv9TQ" body="SELECT SUM(double(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
          </builtInIndicatorDefinition>
        </meanIndicator>
        <medianIndicator xmi:id="_cODlYIGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" median="17461.0">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodhIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Median_0.1.definition#_ccI48hF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dH-PIIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Lower_estimate&quot; FROM (SELECT TOP 6162 &quot;Lower_estimate&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Lower_estimate&quot; IS NOT NULL  ORDER BY &quot;Lower_estimate&quot; ASC ) AS FOO ORDER BY &quot;Lower_estimate&quot; DESC ) AS BAR" language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c0OzwIGyEeqKnMyI8vv9TQ" name="Median" label="Median">
            <taggedValue xmi:id="_c0OzwYGyEeqKnMyI8vv9TQ" tag="Description" value="The median is the value separating the higher half of a sample, a population or a probability distribution from the lower half"/>
            <taggedValue xmi:id="_c0OzwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the median of the records"/>
            <sqlGenericExpression xmi:id="_c0Ozw4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
            <sqlGenericExpression xmi:id="_c0OzxIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_c0OzxYGyEeqKnMyI8vv9TQ" body="SELECT AVG(&lt;%=__COLUMN_NAMES__%>) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c0OzxoGyEeqKnMyI8vv9TQ" body="SELECT MEDIAN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="10"/>
            <sqlGenericExpression xmi:id="_c0Ozx4GyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="9"/>
            <sqlGenericExpression xmi:id="_c0OzyIGyEeqKnMyI8vv9TQ" body="SELECT AVG(double(&lt;%=__COLUMN_NAMES__%>)) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="DB2"/>
            <sqlGenericExpression xmi:id="_c0OzyYGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c0OzyoGyEeqKnMyI8vv9TQ" body="SELECT AVG(cast (&lt;%=__COLUMN_NAMES__%> AS NUMERIC)) FROM (SELECT distinct &lt;%=__COLUMN_NAMES__%> FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) STT WHERE (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) AS SOU WHERE SOU.&lt;%=__COLUMN_NAMES__%> &lt;= STT.&lt;%=__COLUMN_NAMES__%>) AND (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%>) AS SUR WHERE SUR.&lt;%=__COLUMN_NAMES__%> >= STT.&lt;%=__COLUMN_NAMES__%>) ) T" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c0Ozy4GyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR" language="Microsoft SQL Server"/>
          </builtInIndicatorDefinition>
        </medianIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODlYoGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODlY4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjaoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c1A24IGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_c1A24YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_c1A24oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_c1A244GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODlZIGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true">
        <parameters xmi:id="_cODlZYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIPU4YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Higher_estimate&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c1JZwIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_c1JZwYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_c1JZwoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_c1JZw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODlZoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" distinctValueCount="7656">
        <parameters xmi:id="_cODlZ4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIPU4oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Higher_estimate&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c1Tx0IGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_c1Tx0YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_c1Tx0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_c1Tx04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODlaIGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" uniqueValueCount="4675">
        <parameters xmi:id="_cODlaYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIPU44GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Higher_estimate&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Higher_estimate&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c1c7wIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_c1c7wYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_c1c7woGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_c1c7w4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c1c7xIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c1c7xYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c1c7xoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c1c7x4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c1c7yIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c1c7yYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODlaoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" duplicateValueCount="2981">
        <parameters xmi:id="_cODla4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIPU5IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Higher_estimate&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Higher_estimate&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c1mFsIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_c1mFsYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_c1mFsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_c1mFs4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c1mFtIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c1mFtYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c1mFtoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c1mFt4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c1mFuIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c1mFuYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BoxIndicator" xmi:id="_cODlbIGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODlbYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Summary_Statistics_0.1.definition#_ccI48BF2Ed2PKb6nEJEvhw"/>
        <IQR xmi:id="_cODlboGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Inter_Quartile_Range_0.1.definition#_ccI48xF2Ed2PKb6nEJEvhw"/>
          <lowerValue xsi:type="dataquality.indicators:LowerQuartileIndicator" xmi:id="_cODlb4GyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="18607.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Lower_Quartile_0.1.definition#_ccI49BF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIhowIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Higher_estimate&quot; FROM (SELECT TOP 3081 &quot;Higher_estimate&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Higher_estimate&quot; IS NOT NULL  ORDER BY &quot;Higher_estimate&quot; ASC ) AS FOO ORDER BY &quot;Higher_estimate&quot; DESC ) AS BAR ORDER BY &quot;Higher_estimate&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c2XhwIGyEeqKnMyI8vv9TQ" name="Lower Quartile" label="Lower Quartile">
              <taggedValue xmi:id="_c2XhwYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are below this value and 3/4th are above"/>
              <taggedValue xmi:id="_c2XhwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the lowest 1/4th records"/>
              <sqlGenericExpression xmi:id="_c2Xhw4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  3* SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*(SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_c2XhxIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_c2XhxYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_c2XhxoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE (NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) /4) +1) " language="DB2"/>
              <sqlGenericExpression xmi:id="_c2Xhx4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_c2XhyIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xsi:type="dataquality.indicators:UpperQuartileIndicator" xmi:id="_cODlcIGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="23804.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Upper_Quartile_0.1.definition#_ccI49RF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIqLoIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Higher_estimate&quot; FROM (SELECT TOP 9243 &quot;Higher_estimate&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Higher_estimate&quot; IS NOT NULL  ORDER BY &quot;Higher_estimate&quot; ASC ) AS FOO ORDER BY &quot;Higher_estimate&quot; DESC ) AS BAR ORDER BY &quot;Higher_estimate&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c2jvAIGyEeqKnMyI8vv9TQ" name="Upper Quartile" label="Upper Quartile">
              <taggedValue xmi:id="_c2jvAYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are above this value and 3/4th are below"/>
              <taggedValue xmi:id="_c2jvAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the highest 1/4th records"/>
              <sqlGenericExpression xmi:id="_c2jvA4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) ) AND 3 * SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)  &lt;= ( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_c2jvBIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_c2jvBYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_c2jvBoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE ( NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>)*3 /4) +1 ) " language="DB2"/>
              <sqlGenericExpression xmi:id="_c2jvB4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_c2jvCIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </IQR>
        <rangeIndicator xmi:id="_cODlcYGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
          <lowerValue xmi:id="_cODlcoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="12232.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIYe0YGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Higher_estimate&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c2FN4IGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
              <taggedValue xmi:id="_c2FN4YGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
              <taggedValue xmi:id="_c2FN4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
              <sqlGenericExpression xmi:id="_c2FN44GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xmi:id="_cODlc4GyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" value="52558.0" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIYe0oGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Higher_estimate&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c2OX0IGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
              <taggedValue xmi:id="_c2OX0YGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
              <taggedValue xmi:id="_c2OX0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
              <sqlGenericExpression xmi:id="_c2OX04GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </rangeIndicator>
        <meanIndicator xmi:id="_cODldIGyEeqKnMyI8vv9TQ" count="12323" nullCount="6605" computed="true" sumStr="2.63855476E8">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Mean_0.1.definition#_ccI48RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIPU5YGyEeqKnMyI8vv9TQ" body="SELECT SUM(&quot;Higher_estimate&quot;), COUNT(&quot;Higher_estimate&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c1yS8IGyEeqKnMyI8vv9TQ" name="Mean" label="Mean">
            <taggedValue xmi:id="_c1yS8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the mean (average) of the records"/>
            <taggedValue xmi:id="_c1yS8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the mean value of numerical records"/>
            <sqlGenericExpression xmi:id="_c1yS84GyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c1yS9IGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_c1yS9YGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c1yS9oGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c1yS94GyEeqKnMyI8vv9TQ" body="SELECT SUM(CAST (&lt;%=__COLUMN_NAMES__%> AS REAL)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c1yS-IGyEeqKnMyI8vv9TQ" body="SELECT SUM(double(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
          </builtInIndicatorDefinition>
        </meanIndicator>
        <medianIndicator xmi:id="_cODldYGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" median="20207.0">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodiIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Median_0.1.definition#_ccI48hF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIYe0IGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Higher_estimate&quot; FROM (SELECT TOP 6162 &quot;Higher_estimate&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Higher_estimate&quot; IS NOT NULL  ORDER BY &quot;Higher_estimate&quot; ASC ) AS FOO ORDER BY &quot;Higher_estimate&quot; DESC ) AS BAR" language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c1610IGyEeqKnMyI8vv9TQ" name="Median" label="Median">
            <taggedValue xmi:id="_c1610YGyEeqKnMyI8vv9TQ" tag="Description" value="The median is the value separating the higher half of a sample, a population or a probability distribution from the lower half"/>
            <taggedValue xmi:id="_c1610oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the median of the records"/>
            <sqlGenericExpression xmi:id="_c16104GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
            <sqlGenericExpression xmi:id="_c1611IGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_c1611YGyEeqKnMyI8vv9TQ" body="SELECT AVG(&lt;%=__COLUMN_NAMES__%>) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c1611oGyEeqKnMyI8vv9TQ" body="SELECT MEDIAN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="10"/>
            <sqlGenericExpression xmi:id="_c16114GyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="9"/>
            <sqlGenericExpression xmi:id="_c1612IGyEeqKnMyI8vv9TQ" body="SELECT AVG(double(&lt;%=__COLUMN_NAMES__%>)) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="DB2"/>
            <sqlGenericExpression xmi:id="_c1612YGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c1612oGyEeqKnMyI8vv9TQ" body="SELECT AVG(cast (&lt;%=__COLUMN_NAMES__%> AS NUMERIC)) FROM (SELECT distinct &lt;%=__COLUMN_NAMES__%> FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) STT WHERE (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) AS SOU WHERE SOU.&lt;%=__COLUMN_NAMES__%> &lt;= STT.&lt;%=__COLUMN_NAMES__%>) AND (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%>) AS SUR WHERE SUR.&lt;%=__COLUMN_NAMES__%> >= STT.&lt;%=__COLUMN_NAMES__%>) ) T" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c16124GyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR" language="Microsoft SQL Server"/>
          </builtInIndicatorDefinition>
        </medianIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODld4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODleIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjb4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c2sR4IGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_c2sR4YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_c2sR4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_c2sR44GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODleYGyEeqKnMyI8vv9TQ" count="18928" nullCount="12323" computed="true">
        <parameters xmi:id="_cODleoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIqLoYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment_footnote&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c22p8IGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_c22p8YGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_c22p8oGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_c22p84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODle4GyEeqKnMyI8vv9TQ" count="18928" nullCount="12323" computed="true" distinctValueCount="4">
        <parameters xmi:id="_cODlfIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIqLooGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Payment_footnote&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c3Aa8IGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_c3Aa8YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_c3Aa8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_c3Aa84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODlfYGyEeqKnMyI8vv9TQ" count="18928" nullCount="12323" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODlfoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIqLo4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment_footnote&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Payment_footnote&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c3QSkIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_c3QSkYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_c3QSkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_c3QSk4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c3QSlIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c3QSlYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c3QSloGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c3QSl4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c3QSmIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c3QSmYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODlf4GyEeqKnMyI8vv9TQ" count="18928" nullCount="12323" computed="true" duplicateValueCount="4">
        <parameters xmi:id="_cODlgIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIqLpIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Payment_footnote&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Payment_footnote&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c3Y1cIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_c3Y1cYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_c3Y1coGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_c3Y1c4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c3Y1dIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c3Y1dYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c3Y1doGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c3Y1d4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c3Y1eIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c3Y1eYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BoxIndicator" xmi:id="_cODlgYGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODlgoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Summary_Statistics_0.1.definition#_ccI48BF2Ed2PKb6nEJEvhw"/>
        <IQR xmi:id="_cODlg4GyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Inter_Quartile_Range_0.1.definition#_ccI48xF2Ed2PKb6nEJEvhw"/>
          <lowerValue xsi:type="dataquality.indicators:LowerQuartileIndicator" xmi:id="_cODlhIGyEeqKnMyI8vv9TQ" count="18928" nullCount="12323" computed="true" value="1.0" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Lower_Quartile_0.1.definition#_ccI49BF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dI74cIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Payment_footnote&quot; FROM (SELECT TOP 1652 &quot;Payment_footnote&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment_footnote&quot; IS NOT NULL  ORDER BY &quot;Payment_footnote&quot; ASC ) AS FOO ORDER BY &quot;Payment_footnote&quot; DESC ) AS BAR ORDER BY &quot;Payment_footnote&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c4LfoIGyEeqKnMyI8vv9TQ" name="Lower Quartile" label="Lower Quartile">
              <taggedValue xmi:id="_c4LfoYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are below this value and 3/4th are above"/>
              <taggedValue xmi:id="_c4LfooGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the lowest 1/4th records"/>
              <sqlGenericExpression xmi:id="_c4Lfo4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  3* SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*(SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_c4LfpIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_c4LfpYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_c4LfpoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE (NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) /4) +1) " language="DB2"/>
              <sqlGenericExpression xmi:id="_c4Lfp4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_c4LfqIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xsi:type="dataquality.indicators:UpperQuartileIndicator" xmi:id="_cODlhYGyEeqKnMyI8vv9TQ" count="18928" nullCount="12323" computed="true" value="5.0" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Upper_Quartile_0.1.definition#_ccI49RF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCYIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Payment_footnote&quot; FROM (SELECT TOP 4954 &quot;Payment_footnote&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment_footnote&quot; IS NOT NULL  ORDER BY &quot;Payment_footnote&quot; ASC ) AS FOO ORDER BY &quot;Payment_footnote&quot; DESC ) AS BAR ORDER BY &quot;Payment_footnote&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c4V3sIGyEeqKnMyI8vv9TQ" name="Upper Quartile" label="Upper Quartile">
              <taggedValue xmi:id="_c4V3sYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are above this value and 3/4th are below"/>
              <taggedValue xmi:id="_c4V3soGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the highest 1/4th records"/>
              <sqlGenericExpression xmi:id="_c4V3s4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) ) AND 3 * SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)  &lt;= ( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_c4V3tIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_c4V3tYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_c4V3toGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE ( NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>)*3 /4) +1 ) " language="DB2"/>
              <sqlGenericExpression xmi:id="_c4V3t4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_c4V3uIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </IQR>
        <rangeIndicator xmi:id="_cODlhoGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
          <lowerValue xmi:id="_cODlh4GyEeqKnMyI8vv9TQ" count="18928" nullCount="12323" computed="true" value="1" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIzVkYGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Payment_footnote&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c306UIGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
              <taggedValue xmi:id="_c306UYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
              <taggedValue xmi:id="_c306UoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
              <sqlGenericExpression xmi:id="_c306U4GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xmi:id="_cODliIGyEeqKnMyI8vv9TQ" count="18928" nullCount="12323" computed="true" value="19" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIzVkoGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Payment_footnote&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_c4CVsIGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
              <taggedValue xmi:id="_c4CVsYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
              <taggedValue xmi:id="_c4CVsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
              <sqlGenericExpression xmi:id="_c4CVs4GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </rangeIndicator>
        <meanIndicator xmi:id="_cODliYGyEeqKnMyI8vv9TQ" count="6605" nullCount="12323" computed="true" sumStr="25109">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Mean_0.1.definition#_ccI48RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIqLpYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&quot;Payment_footnote&quot;), COUNT(&quot;Payment_footnote&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c3j0kIGyEeqKnMyI8vv9TQ" name="Mean" label="Mean">
            <taggedValue xmi:id="_c3j0kYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the mean (average) of the records"/>
            <taggedValue xmi:id="_c3j0koGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the mean value of numerical records"/>
            <sqlGenericExpression xmi:id="_c3j0k4GyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c3j0lIGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_c3j0lYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c3j0loGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c3j0l4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CAST (&lt;%=__COLUMN_NAMES__%> AS REAL)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c3j0mIGyEeqKnMyI8vv9TQ" body="SELECT SUM(double(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
          </builtInIndicatorDefinition>
        </meanIndicator>
        <medianIndicator xmi:id="_cODlioGyEeqKnMyI8vv9TQ" nullCount="12323" computed="true" median="1.0">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodjIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Median_0.1.definition#_ccI48hF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dIzVkIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 1 &quot;Payment_footnote&quot; FROM (SELECT TOP 3303 &quot;Payment_footnote&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Payment_footnote&quot; IS NOT NULL  ORDER BY &quot;Payment_footnote&quot; ASC ) AS FOO ORDER BY &quot;Payment_footnote&quot; DESC ) AS BAR" language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c3sXcIGyEeqKnMyI8vv9TQ" name="Median" label="Median">
            <taggedValue xmi:id="_c3sXcYGyEeqKnMyI8vv9TQ" tag="Description" value="The median is the value separating the higher half of a sample, a population or a probability distribution from the lower half"/>
            <taggedValue xmi:id="_c3sXcoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the median of the records"/>
            <sqlGenericExpression xmi:id="_c3sXc4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
            <sqlGenericExpression xmi:id="_c3sXdIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_c3sXdYGyEeqKnMyI8vv9TQ" body="SELECT AVG(&lt;%=__COLUMN_NAMES__%>) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c3sXdoGyEeqKnMyI8vv9TQ" body="SELECT MEDIAN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="10"/>
            <sqlGenericExpression xmi:id="_c3sXd4GyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="9"/>
            <sqlGenericExpression xmi:id="_c3sXeIGyEeqKnMyI8vv9TQ" body="SELECT AVG(double(&lt;%=__COLUMN_NAMES__%>)) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="DB2"/>
            <sqlGenericExpression xmi:id="_c3sXeYGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c3sXeoGyEeqKnMyI8vv9TQ" body="SELECT AVG(cast (&lt;%=__COLUMN_NAMES__%> AS NUMERIC)) FROM (SELECT distinct &lt;%=__COLUMN_NAMES__%> FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) STT WHERE (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) AS SOU WHERE SOU.&lt;%=__COLUMN_NAMES__%> &lt;= STT.&lt;%=__COLUMN_NAMES__%>) AND (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%>) AS SUR WHERE SUR.&lt;%=__COLUMN_NAMES__%> >= STT.&lt;%=__COLUMN_NAMES__%>) ) T" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c3sXe4GyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR" language="Microsoft SQL Server"/>
          </builtInIndicatorDefinition>
        </medianIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODljIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODljYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjcIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c4fBoIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_c4fBoYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_c4fBooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_c4fBo4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODljoGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODlj4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCYYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Value_of_care_display_name&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c4oyoIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_c4oyoYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_c4oyooGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_c4oyo4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODlkIGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4">
        <parameters xmi:id="_cODlkYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCYoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Value_of_care_display_name&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c41m8IGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_c41m8YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_c41m8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_c41m84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODlkoGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODlk4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCY4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Value_of_care_display_name&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Value_of_care_display_name&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c4__AIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_c4__AYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_c4__AoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_c4__A4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c4__BIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c4__BYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c4__BoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c4__B4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c4__CIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c4__CYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODllIGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4">
        <parameters xmi:id="_cODllYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCZIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Value_of_care_display_name&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Value_of_care_display_name&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c5KXEIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_c5KXEYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_c5KXEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_c5KXE4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c5KXFIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c5KXFYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c5KXFoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c5KXF4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c5KXGIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c5KXGYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cODlloGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODll4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCZYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Value_of_care_display_name&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Value_of_care_display_name&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c5ThAIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_c5ThAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_c5ThAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_c5ThA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_c5ThBIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c5ThBYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_c5ThBoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c5ThB4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cODlmIGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODlmYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cODlmoGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="629356.0">
          <parameters xmi:id="_cODlm4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlnIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCZoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Value_of_care_display_name&quot;)), COUNT(&quot;Value_of_care_display_name&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c5cq8IGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_c5cq8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_c5cq8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c5cq84GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c5cq9IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c5cq9YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c5cq9oGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c5cq94GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c5cq-IGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c5cq-YGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c5cq-oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c5cq-4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c5cq_IGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c5cq_YGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c5cq_oGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c5cq_4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cODlnYGyEeqKnMyI8vv9TQ" computed="true" length="34">
          <parameters xmi:id="_cODlnoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODln4GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCZ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Value_of_care_display_name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c5o4MIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_c5o4MYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_c5o4MoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c5o4M4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c5o4NIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_c5o4NYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c5o4NoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c5o4N4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c5o4OIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c5o4OYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_c5o4OoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c5o4O4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c5o4PIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c5o4PYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c5o4PoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c5o4P4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cODloIGyEeqKnMyI8vv9TQ" computed="true" length="31">
          <parameters xmi:id="_cODloYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlooGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCaIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Value_of_care_display_name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_name&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c5xbEIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_c5xbEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_c5xbEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c5xbE4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c5xbFIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c5xbFYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c5xbFoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c5xbF4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c5xbGIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c5xbGYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c5xbGoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c5xbG4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c5xbHIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c5xbHYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c5xbHoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c5xbH4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cODlo4GyEeqKnMyI8vv9TQ" computed="true" length="31">
          <parameters xmi:id="_cODlpIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlpYGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCb4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Value_of_care_display_name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c62ZIIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_c62ZIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_c62ZIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c62ZI4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c62ZJIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c62ZJYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c62ZJoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c62ZJ4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c62ZKIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c62ZKYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c62ZKoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c62ZK4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c62ZLIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c62ZLYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c62ZLoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cODlpoGyEeqKnMyI8vv9TQ" computed="true" length="31">
          <parameters xmi:id="_cODlp4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlqIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCcIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c6-U8IGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_c6-U8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_c6-U8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c6-U84GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c6-U9IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c6-U9YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c6-U9oGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c6-U94GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c6-U-IGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c6-U-YGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c6-U-oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c6-U-4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c6-U_IGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c6-U_YGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c6-U_oGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c6-U_4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cODlqYGyEeqKnMyI8vv9TQ" computed="true" length="31">
          <parameters xmi:id="_cODlqoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlq4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCcYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c7FCoIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_c7FCoYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_c7FCooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c7FCo4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c7FCpIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c7FCpYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c7FCpoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c7FCp4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c7FCqIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c7FCqYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c7FCqoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c7FCq4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c7FCrIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c7FCrYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c7FCroGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c7FCr4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cODlrIGyEeqKnMyI8vv9TQ" computed="true" length="34">
          <parameters xmi:id="_cODlrYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlroGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCbIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Value_of_care_display_name&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c6X4AIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_c6X4AYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_c6X4AoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c6X4A4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c6X4BIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c6X4BYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c6X4BoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c6X4B4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c6X4CIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c6X4CYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c6X4CoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c6X4C4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c6X4DIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c6X4DYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c6X4DoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cODlr4GyEeqKnMyI8vv9TQ" computed="true" length="34">
          <parameters xmi:id="_cODlsIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlsYGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCbYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c6ksUIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_c6ksUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_c6ksUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c6ksU4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c6ksVIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c6ksVYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c6ksVoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c6ksV4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c6ksWIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c6ksWYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_c6ksWoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c6ksW4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c6ksXIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c6ksXYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c6ksXoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c6ksX4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cODlsoGyEeqKnMyI8vv9TQ" computed="true" length="34">
          <parameters xmi:id="_cODls4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODltIGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCboGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_name&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c6vEYIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_c6vEYYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_c6vEYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c6vEY4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c6vEZIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c6vEZYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c6vEZoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c6vEZ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c6vEaIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c6vEaYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c6vEaoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c6vEa4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c6vEbIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c6vEbYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c6vEboGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c6vEb4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cODltYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="629356.0">
          <parameters xmi:id="_cODltoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlt4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCaYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Value_of_care_display_name&quot;)) )=0  THEN '' ELSE  &quot;Value_of_care_display_name&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_name&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c59BQIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_c59BQYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_c59BQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c59BQ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c59BRIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c59BRYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c59BRoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c59BR4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c59BSIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c59BSYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c59BSoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c59BS4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c59BTIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c59BTYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c59BToGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cODluIGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="629356.0">
          <parameters xmi:id="_cODluYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODluoGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCaoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_name&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_name&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c6EWAIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_c6EWAYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_c6EWAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c6EWA4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c6EWBIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c6EWBYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c6EWBoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c6EWB4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c6EWCIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c6EWCYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c6EWCoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c6EWC4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c6EWDIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c6EWDYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c6EWDoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c6EWD4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cODlu4GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="629356.0">
          <parameters xmi:id="_cODlvIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlvYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodkIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCa4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_name&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Value_of_care_display_name&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_name&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c6LqwIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_c6LqwYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_c6LqwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c6Lqw4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c6LqxIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c6LqxYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c6LqxoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c6Lqx4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c6LqyIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c6LqyYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c6LqyoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c6Lqy4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c6LqzIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c6LqzYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c6LqzoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c6Lqz4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODlv4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODlwIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyja4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c7PasIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_c7PasYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_c7PasoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_c7Pas4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODlwYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODlwoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCcoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Value_of_care_display_ID&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c7XWgIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_c7XWgYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_c7XWgoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_c7XWg4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODlw4GyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="4">
        <parameters xmi:id="_cODlxIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCc4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Value_of_care_display_ID&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c7f5YIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_c7f5YYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_c7f5YoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_c7f5Y4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODlxYGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODlxoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCdIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Value_of_care_display_ID&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Value_of_care_display_ID&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c7nOIIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_c7nOIYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_c7nOIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_c7nOI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c7nOJIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c7nOJYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c7nOJoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c7nOJ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c7nOKIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c7nOKYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODlx4GyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="4">
        <parameters xmi:id="_cODlyIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCdYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Value_of_care_display_ID&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Value_of_care_display_ID&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c7ui4IGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_c7ui4YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_c7ui4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_c7ui44GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c7ui5IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c7ui5YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c7ui5oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c7ui54GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c7ui6IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c7ui6YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cODlyYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODlyoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCdoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Value_of_care_display_ID&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Value_of_care_display_ID&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c72esIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_c72esYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_c72esoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_c72es4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_c72etIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c72etYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_c72etoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c72et4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cODly4GyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODlzIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cODlzYGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="255528.0">
          <parameters xmi:id="_cODlzoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODlz4GyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCd4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Value_of_care_display_ID&quot;)), COUNT(&quot;Value_of_care_display_ID&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c8APsIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_c8APsYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_c8APsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c8APs4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c8APtIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c8APtYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c8APtoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c8APt4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c8APuIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c8APuYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c8APuoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c8APu4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c8APvIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c8APvYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c8APvoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c8APv4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cODl0IGyEeqKnMyI8vv9TQ" computed="true" length="17">
          <parameters xmi:id="_cODl0YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl0oGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCeIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Value_of_care_display_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c8HkcIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_c8HkcYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_c8HkcoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c8Hkc4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c8HkdIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_c8HkdYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c8HkdoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c8Hkd4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c8HkeIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c8HkeYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_c8HkeoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c8Hke4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c8HkfIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c8HkfYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c8HkfoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c8Hkf4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cODl04GyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cODl1IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl1YGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCeYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Value_of_care_display_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_ID&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c8RVcIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_c8RVcYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_c8RVcoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c8RVc4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c8RVdIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c8RVdYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c8RVdoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c8RVd4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c8RVeIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c8RVeYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c8RVeoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c8RVe4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c8RVfIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c8RVfYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c8RVfoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c8RVf4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cODl1oGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cODl14GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl2IGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCgIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Value_of_care_display_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c9L7cIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_c9L7cYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_c9L7coGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c9L7c4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c9L7dIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c9L7dYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c9L7doGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c9L7d4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c9L7eIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c9L7eYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c9L7eoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c9L7e4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c9L7fIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c9L7fYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c9L7foGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cODl2YGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cODl2oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl24GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCgYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c9T3QIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_c9T3QYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_c9T3QoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c9T3Q4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c9T3RIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c9T3RYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c9T3RoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c9T3R4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c9T3SIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c9T3SYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c9T3SoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c9T3S4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c9T3TIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c9T3TYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c9T3ToGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c9T3T4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cODl3IGyEeqKnMyI8vv9TQ" computed="true" length="12">
          <parameters xmi:id="_cODl3YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl3oGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpcIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c9bzEIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_c9bzEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_c9bzEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c9bzE4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c9bzFIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c9bzFYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c9bzFoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c9bzF4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c9bzGIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c9bzGYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c9bzGoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c9bzG4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c9bzHIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c9bzHYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c9bzHoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c9bzH4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cODl34GyEeqKnMyI8vv9TQ" computed="true" length="17">
          <parameters xmi:id="_cODl4IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl4YGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCfYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Value_of_care_display_ID&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c8yS0IGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_c8yS0YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_c8yS0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c8yS04GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c8yS1IGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c8yS1YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c8yS1oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c8yS14GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c8yS2IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c8yS2YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c8yS2oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c8yS24GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c8yS3IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c8yS3YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c8yS3oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cODl4oGyEeqKnMyI8vv9TQ" computed="true" length="17">
          <parameters xmi:id="_cODl44GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl5IGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCfoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c85nkIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_c85nkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_c85nkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c85nk4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c85nlIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c85nlYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c85nloGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c85nl4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c85nmIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c85nmYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_c85nmoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c85nm4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c85nnIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c85nnYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c85nnoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c85nn4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cODl5YGyEeqKnMyI8vv9TQ" computed="true" length="17">
          <parameters xmi:id="_cODl5oGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl54GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCf4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_ID&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c9D_oIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_c9D_oYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_c9D_ooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c9D_o4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c9D_pIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c9D_pYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c9D_poGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c9D_p4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c9D_qIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c9D_qYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c9D_qoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c9D_q4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c9D_rIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c9D_rYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c9D_roGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c9D_r4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cODl6IGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="255528.0">
          <parameters xmi:id="_cODl6YGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl6oGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCeoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Value_of_care_display_ID&quot;)) )=0  THEN '' ELSE  &quot;Value_of_care_display_ID&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_display_ID&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c8YqMIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_c8YqMYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_c8YqMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c8YqM4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c8YqNIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c8YqNYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c8YqNoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c8YqN4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c8YqOIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c8YqOYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c8YqOoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c8YqO4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c8YqPIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c8YqPYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c8YqPoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cODl64GyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="255528.0">
          <parameters xmi:id="_cODl7IGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl7YGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCe4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_ID&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_display_ID&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c8gmAIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_c8gmAYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_c8gmAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c8gmA4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c8gmBIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c8gmBYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c8gmBoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c8gmB4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c8gmCIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c8gmCYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c8gmCoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c8gmC4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c8gmDIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c8gmDYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c8gmDoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c8gmD4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cODl7oGyEeqKnMyI8vv9TQ" count="18928" computed="true" sumLength="255528.0">
          <parameters xmi:id="_cODl74GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODl8IGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodlIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFCfIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_ID&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Value_of_care_display_ID&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_display_ID&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c8q-EIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_c8q-EYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_c8q-EoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c8q-E4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c8q-FIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c8q-FYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c8q-FoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c8q-F4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c8q-GIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c8q-GYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c8q-GoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c8q-G4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c8q-HIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c8q-HYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c8q-HoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c8q-H4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODl8oGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODl84GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjZIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c9myMIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_c9myMYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_c9myMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_c9myM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODl9IGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true">
        <parameters xmi:id="_cODl9YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpcYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Value_of_care_category&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c9vVEIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_c9vVEYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_c9vVEoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_c9vVE4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODl9oGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" distinctValueCount="20">
        <parameters xmi:id="_cODl94GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpcoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Value_of_care_category&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c94fAIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_c94fAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_c94fAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_c94fA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODl-IGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODl-YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpc4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Value_of_care_category&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Value_of_care_category&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c-Aa0IGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_c-Aa0YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_c-Aa0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_c-Aa04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c-Aa1IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c-Aa1YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c-Aa1oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c-Aa14GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c-Aa2IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c-Aa2YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODl-oGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" duplicateValueCount="20">
        <parameters xmi:id="_cODl-4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpdIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Value_of_care_category&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Value_of_care_category&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c-IWoIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_c-IWoYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_c-IWooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_c-IWo4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_c-IWpIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_c-IWpYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c-IWpoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_c-IWp4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c-IWqIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_c-IWqYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BlankCountIndicator" xmi:id="_cODl_IGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true">
        <parameters xmi:id="_cODl_YGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Blank_Count_0.1.definition#_ccHq0xF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpdYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&quot;Value_of_care_category&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  WHERE LTRIM(RTRIM(&quot;Value_of_care_category&quot;)) = '' " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_c-TVwIGyEeqKnMyI8vv9TQ" name="Blank Count" label="Blank Count">
          <taggedValue xmi:id="_c-T80IGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of blank rows. A blank is a non null textual data that contains only white spaces (or nothing). Note that Oracle does not distinguish between the empty string and the null value"/>
          <taggedValue xmi:id="_c-T80YGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of blank records"/>
          <sqlGenericExpression xmi:id="_c-T80oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
          <sqlGenericExpression xmi:id="_c-T804GyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
          <sqlGenericExpression xmi:id="_c-T81IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
          <sqlGenericExpression xmi:id="_c-T81YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) = '' &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_c-T81oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> = '' or RTRIM(LTRIM(&lt;%=__COLUMN_NAMES__%>)) = '') &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:TextIndicator" xmi:id="_cODl_oGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODl_4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Text_Statistics_0.1.definition#_yb9x0zh8Ed2XmO7pl5Yuyg"/>
        <averageLengthIndicator xmi:id="_cODmAIGyEeqKnMyI8vv9TQ" count="12323" nullCount="6605" computed="true" sumLength="458071.0">
          <parameters xmi:id="_cODmAYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmAoGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_0.1.definition#_ccIR4BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpdoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&quot;Value_of_care_category&quot;)), COUNT(&quot;Value_of_care_category&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_category&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c-bRkIGyEeqKnMyI8vv9TQ" name="Average Length" label="Average Length">
            <taggedValue xmi:id="_c-bRkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field. Does not take into account the null values when computing the average."/>
            <taggedValue xmi:id="_c-bRkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c-bRk4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c-bRlIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c-bRlYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c-bRloGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c-bRl4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c-bRmIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c-bRmYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c-bRmoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c-bRm4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c-bRnIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )), COUNT( &lt;%=__COLUMN_NAMES__%> ) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c-bRnYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c-bRnoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c-bRn4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </averageLengthIndicator>
        <maxLengthIndicator xmi:id="_cODmA4GyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" length="41">
          <parameters xmi:id="_cODmBIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmBYGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_0.1.definition#_ccHq1RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpd4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Value_of_care_category&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_category&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c-imUIGyEeqKnMyI8vv9TQ" name="Maximal Length" label="Maximal Length">
            <taggedValue xmi:id="_c-imUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field."/>
            <taggedValue xmi:id="_c-imUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c-imU4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c-imVIGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" modificationDate=""/>
            <sqlGenericExpression xmi:id="_c-imVYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c-jNYIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c-jNYYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c-jNYoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c-jNY4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" modificationDate=""/>
            <sqlGenericExpression xmi:id="_c-jNZIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c-jNZYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' )  &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c-jNZoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c-jNZ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c-jNaIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c-jNaYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthIndicator>
        <minLengthIndicator xmi:id="_cODmBoGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" length="13">
          <parameters xmi:id="_cODmB4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmCIGyEeqKnMyI8vv9TQ" useBlank="false"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_0.1.definition#_ccHq1BF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpeIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Value_of_care_category&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_category&quot; IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c-sXUIGyEeqKnMyI8vv9TQ" name="Minimal Length" label="Minimal Length">
            <taggedValue xmi:id="_c-sXUYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field. Does not take into account the null values when computing the minimal length."/>
            <taggedValue xmi:id="_c-sXUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c-sXU4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c-sXVIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c-sXVYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c-sXVoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c-sXV4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c-sXWIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c-sXWYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c-sXWoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c-sXW4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c-sXXIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) AND ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c-sXXYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (1=1) AND (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c-sXXoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c-sXX4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) AND (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthIndicator>
        <minLengthWithBlankIndicator xmi:id="_cODmCYGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" length="13">
          <parameters xmi:id="_cODmCoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmC4GyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_0.1.definition#_G4EzQZU9Ed-Y15ulK_jijQ"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpf4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&quot;Value_of_care_category&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_category&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c_pZkIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank" label="Minimal Length With Blank">
            <taggedValue xmi:id="_c_pZkYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank as zero length values."/>
            <taggedValue xmi:id="_c_pZkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c_pZk4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c_pZlIGyEeqKnMyI8vv9TQ" body="SELECT MIN( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c_pZlYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c_pZloGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c_pZl4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c_pZmIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c_pZmYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c_pZmoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c_pZm4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c_pZnIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c_pZnYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c_pZnoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankIndicator>
        <minLengthWithNullIndicator xmi:id="_cODmDIGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" length="0">
          <parameters xmi:id="_cODmDYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmDoGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Null_0.1.definition#_a4KsoI1qEd-xwI2imLgHRA"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpgIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_category&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c_xVYIGyEeqKnMyI8vv9TQ" name="Minimal Length With Null" label="Minimal Length With Null">
            <taggedValue xmi:id="_c_xVYYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting null as zero length values."/>
            <taggedValue xmi:id="_c_xVYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c_xVY4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c_xVZIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c_xVZYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c_xVZoGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c_xVZ4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c_xVaIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c_xVaYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c_xVaoGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c_xVa4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c_xVbIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c_xVbYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c_xVboGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c_xVb4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithNullIndicator>
        <minLengthWithBlankNullIndicator xmi:id="_cODmD4GyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" length="0">
          <parameters xmi:id="_cODmEIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmEYGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Minimal_Length_With_Blank_and_Null_0.1.definition#_9HDjMJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpgYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_category&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c_87kIGyEeqKnMyI8vv9TQ" name="Minimal Length With Blank and Null" label="Minimal Length With Blank and Null">
            <taggedValue xmi:id="_c_87kYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the minimal length of a text field, counting blank and null as zero length values."/>
            <taggedValue xmi:id="_c_87koGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the smallest textual record"/>
            <sqlGenericExpression xmi:id="_c_87k4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c_87lIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c_87lYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c_87loGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c_87l4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c_87mIGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c_87mYGyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c_87moGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c_87m4GyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c_87nIGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c_87nYGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c_87noGyEeqKnMyI8vv9TQ" body="SELECT MIN(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c_87n4GyEeqKnMyI8vv9TQ" body="SELECT MIN(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </minLengthWithBlankNullIndicator>
        <maxLengthWithBlankIndicator xmi:id="_cODmEoGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" length="41">
          <parameters xmi:id="_cODmE4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmFIGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_0.1.definition#_-xmZcJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpfIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&quot;Value_of_care_category&quot;)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_category&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c_Oi0IGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank" label="Maximal Length With Blank">
            <taggedValue xmi:id="_c_Oi0YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting blank data  as zero length values."/>
            <taggedValue xmi:id="_c_Oi0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c_Oi04GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c_Oi1IGyEeqKnMyI8vv9TQ" body="SELECT MAX( LENGTH(&lt;%=__COLUMN_NAMES__%>) ) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c_Oi1YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c_Oi1oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c_Oi14GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c_Oi2IGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c_Oi2YGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c_Oi2oGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c_Oi24GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c_Oi3IGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( &lt;%=__COLUMN_NAMES__%> )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c_Oi3YGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c_Oi3oGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(&lt;%=__COLUMN_NAMES__%>)) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankIndicator>
        <maxLengthWithNullIndicator xmi:id="_cODmFYGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" length="41">
          <parameters xmi:id="_cODmFoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmF4GyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Null_0.1.definition#_-_UFUJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpfYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_category&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c_XswIGyEeqKnMyI8vv9TQ" name="Maximal Length With Null" label="Maximal Length With Null">
            <taggedValue xmi:id="_c_XswYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null data as zero length values."/>
            <taggedValue xmi:id="_c_XswoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c_Xsw4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c_XsxIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c_XsxYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c_XsxoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c_Xsx4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c_XsyIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c_XsyYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive" version=""/>
            <sqlGenericExpression xmi:id="_c_XsyoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c_Xsy4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c_XszIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c_XszYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c_XszoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c_Xsz4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithNullIndicator>
        <maxLengthWithBlankNullIndicator xmi:id="_cODmGIGyEeqKnMyI8vv9TQ" nullCount="6605" computed="true" length="41">
          <parameters xmi:id="_cODmGYGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmGoGyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Maximal_Length_With_Blank_and_Null_0.1.definition#_-hzp8JSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpfoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_category&quot; END)) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c_hdwIGyEeqKnMyI8vv9TQ" name="Maximal Length With Blank and Null" label="Maximal Length With Blank and Null">
            <taggedValue xmi:id="_c_hdwYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the maximal length of a text field, counting null and blank data as zero length values."/>
            <taggedValue xmi:id="_c_hdwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the length of the longest textual record"/>
            <sqlGenericExpression xmi:id="_c_hdw4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c_hdxIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c_hdxYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c_hdxoGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c_hdx4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c_hdyIGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c_hdyYGyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c_hdyoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c_hdy4GyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c_hdzIGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END )) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c_hdzYGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c_hdzoGyEeqKnMyI8vv9TQ" body="SELECT MAX(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c_hdz4GyEeqKnMyI8vv9TQ" body="SELECT MAX(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </maxLengthWithBlankNullIndicator>
        <avgLengthWithBlankIndicator xmi:id="_cODmG4GyEeqKnMyI8vv9TQ" count="12323" nullCount="6605" computed="true" sumLength="458071.0">
          <parameters xmi:id="_cODmHIGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmHYGyEeqKnMyI8vv9TQ"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_0.1.definition#__gPoIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpeYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&quot;Value_of_care_category&quot;)) )=0  THEN '' ELSE  &quot;Value_of_care_category&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (&quot;Value_of_care_category&quot; IS NOT NULL ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c-0TIIGyEeqKnMyI8vv9TQ" name="Average Length With Blank" label="Average Length With Blank">
            <taggedValue xmi:id="_c-0TIYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank data as zero length values."/>
            <taggedValue xmi:id="_c-0TIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c-0TI4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c-0TJIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE  LENGTH(&lt;%=__COLUMN_NAMES__%>)END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c-0TJYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) )=0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c-0TJoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c-0TJ4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c-0TKIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c-0TKYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c-0TKoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c-0TK4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM(&lt;%=__COLUMN_NAMES__%>)) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c-0TLIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( &lt;%=__COLUMN_NAMES__%> ) ) =0  THEN '' ELSE   &lt;%=__COLUMN_NAMES__%>  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   WHERE ( &lt;%=__COLUMN_NAMES__%>  IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c-0TLYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c-0TLoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM(&lt;%=__COLUMN_NAMES__%>) ) =0  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (&lt;%=__COLUMN_NAMES__%> IS NOT NULL ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankIndicator>
        <avgLengthWithNullIndicator xmi:id="_cODmHoGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" sumLength="458071.0">
          <parameters xmi:id="_cODmH4GyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmIIGyEeqKnMyI8vv9TQ" useBlank="false" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Null_0.1.definition#__vI_wJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpeoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_category&quot; END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE (LTRIM(RTRIM(CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN 'NULL TALEND' ELSE &quot;Value_of_care_category&quot; END)) &lt;> '' ) " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c-82AIGyEeqKnMyI8vv9TQ" name="Average Length With Null" label="Average Length With Null">
            <taggedValue xmi:id="_c-82AYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting null data as zero length values."/>
            <taggedValue xmi:id="_c-82AoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c-82A4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c-82BIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(NVL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) IS NOT NULL) &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c-82BYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (LTRIM(RTRIM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END)) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c-82BoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c-82B4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c-82CIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c-82CYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c-82CoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c-82C4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END ))  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c-82DIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN 'NULL TALEND' ELSE  &lt;%=__COLUMN_NAMES__%>  END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c-82DYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  WHERE ( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN 'NULL TALEND' ELSE &lt;%=__COLUMN_NAMES__%> END )  &lt;>  '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c-82DoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(ISNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c-82D4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(IFNULL(&lt;%=__COLUMN_NAMES__%>,''))), COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE (TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'NULL TALEND')) &lt;> '' ) &lt;%=__AND_WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithNullIndicator>
        <avgLengthWithBlankNullIndicator xmi:id="_cODmIYGyEeqKnMyI8vv9TQ" count="18928" nullCount="6605" computed="true" sumLength="458071.0">
          <parameters xmi:id="_cODmIoGyEeqKnMyI8vv9TQ">
            <textParameter xmi:id="_cODmI4GyEeqKnMyI8vv9TQ" useNulls="true"/>
          </parameters>
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodmIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Text Statistics/Average_Length_With_Blank_and_Null_0.1.definition#__TbUIJSOEd-TE5ti6XNR2Q"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpe4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_category&quot; END )) )=0  THEN '' ELSE   CASE WHEN &quot;Value_of_care_category&quot; IS NULL  THEN '' ELSE &quot;Value_of_care_category&quot; END  END)), COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_c_HOEIGyEeqKnMyI8vv9TQ" name="Average Length With Blank and Null" label="Average Length With Blank and Null">
            <taggedValue xmi:id="_c_HOEYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the average length of the field, counting blank and null data as zero lenght values."/>
            <taggedValue xmi:id="_c_HOEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the average length of the textual record"/>
            <sqlGenericExpression xmi:id="_c_HOE4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_c_HOFIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NOT NULL AND  TRIM(&lt;%=__COLUMN_NAMES__%>) IS NULL THEN 0 ELSE CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL THEN 0 ELSE LENGTH(&lt;%=__COLUMN_NAMES__%>) END  END), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_c_HOFYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LEN(CASE WHEN  LEN( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) )=0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Microsoft SQL Server"/>
            <sqlGenericExpression xmi:id="_c_HOFoGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
            <sqlGenericExpression xmi:id="_c_HOF4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Ingres"/>
            <sqlGenericExpression xmi:id="_c_HOGIGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQLite"/>
            <sqlGenericExpression xmi:id="_c_HOGYGyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN   LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Hive"/>
            <sqlGenericExpression xmi:id="_c_HOGoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_c_HOG4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( LTRIM(RTRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END )) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_c_HOHIGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END ) ) =0  THEN '' ELSE   CASE WHEN  &lt;%=__COLUMN_NAMES__%>  IS NULL  THEN '' ELSE  &lt;%=__COLUMN_NAMES__%>  END  END)), COUNT(*) FROM  &lt;%=__TABLE_NAME__%>   &lt;%=__WHERE_CLAUSE__%>" language="Informix"/>
            <sqlGenericExpression xmi:id="_c_HOHYGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH( CASE WHEN   CHAR_LENGTH( TRIM( CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END ) ) =0  THEN '' ELSE   CASE WHEN &lt;%=__COLUMN_NAMES__%> IS NULL  THEN '' ELSE &lt;%=__COLUMN_NAMES__%> END  END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%>  &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_c_HOHoGyEeqKnMyI8vv9TQ" body="SELECT SUM(CHAR_LENGTH(CASE WHEN   CHAR_LENGTH( TRIM(ISNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  ISNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Netezza"/>
            <sqlGenericExpression xmi:id="_c_HOH4GyEeqKnMyI8vv9TQ" body="SELECT SUM(LENGTH(CASE WHEN LENGTH( TRIM(IFNULL(&lt;%=__COLUMN_NAMES__%>,'')) ) =0  THEN '' ELSE  IFNULL(&lt;%=__COLUMN_NAMES__%>,'') END)), COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Snowflake"/>
          </builtInIndicatorDefinition>
        </avgLengthWithBlankNullIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODmJYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODmJoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjaYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dAEQUIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_dAEQUYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_dAEQUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_dAEQU4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODmJ4GyEeqKnMyI8vv9TQ" count="18928" nullCount="12316" computed="true">
        <parameters xmi:id="_cODmKIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpgoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Value_of_care_footnote&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dAMzMIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_dAMzMYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_dAMzMoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_dAMzM4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODmKYGyEeqKnMyI8vv9TQ" count="18928" nullCount="12316" computed="true" distinctValueCount="4">
        <parameters xmi:id="_cODmKoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFpg4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Value_of_care_footnote&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dAV9IIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_dAV9IYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_dAV9IoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_dAV9I4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODmK4GyEeqKnMyI8vv9TQ" count="18928" nullCount="12316" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODmLIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFphIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Value_of_care_footnote&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Value_of_care_footnote&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dAd48IGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_dAd48YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_dAd48oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_dAd484GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dAd49IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dAd49YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dAd49oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dAd494GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dAd4-IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dAd4-YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODmLYGyEeqKnMyI8vv9TQ" count="18928" nullCount="12316" computed="true" duplicateValueCount="4">
        <parameters xmi:id="_cODmLoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFphYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Value_of_care_footnote&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Value_of_care_footnote&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dAl0wIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_dAl0wYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_dAl0woGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_dAl0w4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dAl0xIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dAl0xYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dAl0xoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dAl0x4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dAl0yIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dAl0yYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BoxIndicator" xmi:id="_cODmL4GyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODmMIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Summary_Statistics_0.1.definition#_ccI48BF2Ed2PKb6nEJEvhw"/>
        <IQR xmi:id="_cODmMYGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Inter_Quartile_Range_0.1.definition#_ccI48xF2Ed2PKb6nEJEvhw"/>
          <lowerValue xsi:type="dataquality.indicators:LowerQuartileIndicator" xmi:id="_cODmMoGyEeqKnMyI8vv9TQ" count="18928" nullCount="12316" computed="true" value="13.0" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Lower_Quartile_0.1.definition#_ccI49BF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJXWQIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Value_of_care_footnote&quot; FROM (SELECT TOP 1654 &quot;Value_of_care_footnote&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Value_of_care_footnote&quot; IS NOT NULL  ORDER BY &quot;Value_of_care_footnote&quot; ASC ) AS FOO ORDER BY &quot;Value_of_care_footnote&quot; DESC ) AS BAR ORDER BY &quot;Value_of_care_footnote&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dBSYUIGyEeqKnMyI8vv9TQ" name="Lower Quartile" label="Lower Quartile">
              <taggedValue xmi:id="_dBSYUYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are below this value and 3/4th are above"/>
              <taggedValue xmi:id="_dBSYUoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the lowest 1/4th records"/>
              <sqlGenericExpression xmi:id="_dBSYU4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  3* SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*(SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_dBSYVIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_dBSYVYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_dBSYVoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE (NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) /4) +1) " language="DB2"/>
              <sqlGenericExpression xmi:id="_dBSYV4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_dBSYWIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xsi:type="dataquality.indicators:UpperQuartileIndicator" xmi:id="_cODmM4GyEeqKnMyI8vv9TQ" count="18928" nullCount="12316" computed="true" value="13.0" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Upper_Quartile_0.1.definition#_ccI49RF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5IIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Value_of_care_footnote&quot; FROM (SELECT TOP 4960 &quot;Value_of_care_footnote&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Value_of_care_footnote&quot; IS NOT NULL  ORDER BY &quot;Value_of_care_footnote&quot; ASC ) AS FOO ORDER BY &quot;Value_of_care_footnote&quot; DESC ) AS BAR ORDER BY &quot;Value_of_care_footnote&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dBaUIIGyEeqKnMyI8vv9TQ" name="Upper Quartile" label="Upper Quartile">
              <taggedValue xmi:id="_dBaUIYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are above this value and 3/4th are below"/>
              <taggedValue xmi:id="_dBaUIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the highest 1/4th records"/>
              <sqlGenericExpression xmi:id="_dBaUI4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) ) AND 3 * SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)  &lt;= ( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_dBaUJIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_dBaUJYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_dBaUJoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE ( NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>)*3 /4) +1 ) " language="DB2"/>
              <sqlGenericExpression xmi:id="_dBaUJ4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_dBaUKIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </IQR>
        <rangeIndicator xmi:id="_cODmNIGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
          <lowerValue xmi:id="_cODmNYGyEeqKnMyI8vv9TQ" count="18928" nullCount="12316" computed="true" value="5" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJOzYYGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Value_of_care_footnote&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dBArgIGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
              <taggedValue xmi:id="_dBArgYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
              <taggedValue xmi:id="_dBArgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
              <sqlGenericExpression xmi:id="_dBArg4GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xmi:id="_cODmNoGyEeqKnMyI8vv9TQ" count="18928" nullCount="12316" computed="true" value="19" datatype="4">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJOzYoGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Value_of_care_footnote&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dBJ1cIGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
              <taggedValue xmi:id="_dBJ1cYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
              <taggedValue xmi:id="_dBJ1coGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
              <sqlGenericExpression xmi:id="_dBJ1c4GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </rangeIndicator>
        <meanIndicator xmi:id="_cODmN4GyEeqKnMyI8vv9TQ" count="6612" nullCount="12316" computed="true" sumStr="87564">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Mean_0.1.definition#_ccI48RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJFphoGyEeqKnMyI8vv9TQ" body="SELECT SUM(&quot;Value_of_care_footnote&quot;), COUNT(&quot;Value_of_care_footnote&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dAxa8IGyEeqKnMyI8vv9TQ" name="Mean" label="Mean">
            <taggedValue xmi:id="_dAxa8YGyEeqKnMyI8vv9TQ" tag="Description" value="computes the mean (average) of the records"/>
            <taggedValue xmi:id="_dAxa8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the mean value of numerical records"/>
            <sqlGenericExpression xmi:id="_dAxa84GyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_dAxa9IGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_dAxa9YGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_dAxa9oGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_dAxa94GyEeqKnMyI8vv9TQ" body="SELECT SUM(CAST (&lt;%=__COLUMN_NAMES__%> AS REAL)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_dAxa-IGyEeqKnMyI8vv9TQ" body="SELECT SUM(double(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
          </builtInIndicatorDefinition>
        </meanIndicator>
        <medianIndicator xmi:id="_cODmOIGyEeqKnMyI8vv9TQ" nullCount="12316" computed="true" median="13.0">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodnIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Median_0.1.definition#_ccI48hF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJOzYIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Value_of_care_footnote&quot; FROM (SELECT TOP 3307 &quot;Value_of_care_footnote&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Value_of_care_footnote&quot; IS NOT NULL  ORDER BY &quot;Value_of_care_footnote&quot; ASC ) AS FOO ORDER BY &quot;Value_of_care_footnote&quot; DESC ) AS BAR" language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dA4vsIGyEeqKnMyI8vv9TQ" name="Median" label="Median">
            <taggedValue xmi:id="_dA4vsYGyEeqKnMyI8vv9TQ" tag="Description" value="The median is the value separating the higher half of a sample, a population or a probability distribution from the lower half"/>
            <taggedValue xmi:id="_dA4vsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the median of the records"/>
            <sqlGenericExpression xmi:id="_dA4vs4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
            <sqlGenericExpression xmi:id="_dA4vtIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_dA4vtYGyEeqKnMyI8vv9TQ" body="SELECT AVG(&lt;%=__COLUMN_NAMES__%>) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="Oracle"/>
            <sqlGenericExpression xmi:id="_dA4vtoGyEeqKnMyI8vv9TQ" body="SELECT MEDIAN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="10"/>
            <sqlGenericExpression xmi:id="_dA4vt4GyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="9"/>
            <sqlGenericExpression xmi:id="_dA4vuIGyEeqKnMyI8vv9TQ" body="SELECT AVG(double(&lt;%=__COLUMN_NAMES__%>)) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="DB2"/>
            <sqlGenericExpression xmi:id="_dA4vuYGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_dA4vuoGyEeqKnMyI8vv9TQ" body="SELECT AVG(cast (&lt;%=__COLUMN_NAMES__%> AS NUMERIC)) FROM (SELECT distinct &lt;%=__COLUMN_NAMES__%> FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) STT WHERE (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) AS SOU WHERE SOU.&lt;%=__COLUMN_NAMES__%> &lt;= STT.&lt;%=__COLUMN_NAMES__%>) AND (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%>) AS SUR WHERE SUR.&lt;%=__COLUMN_NAMES__%> >= STT.&lt;%=__COLUMN_NAMES__%>) ) T" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_dA4vu4GyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR" language="Microsoft SQL Server"/>
          </builtInIndicatorDefinition>
        </medianIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODmOoGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODmO4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjdYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dBlTQIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_dBlTQYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_dBlTQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_dBlTQ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODmPIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODmPYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5IYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Start_Date&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dBt2IIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_dBt2IYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_dBt2IoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_dBt2I4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODmPoGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="2">
        <parameters xmi:id="_cODmP4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5IoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Start_Date&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dB1x8IGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_dB1x8YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_dB1x8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_dB1x84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODmQIGyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODmQYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5I4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Start_Date&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Start_Date&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dB-74IGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_dB-74YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_dB-74oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_dB-744GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dB-75IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dB-75YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dB-75oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dB-754GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dB-76IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dB-76YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODmQoGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="2">
        <parameters xmi:id="_cODmQ4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5JIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Start_Date&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Start_Date&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dCG3sIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_dCG3sYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_dCG3soGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_dCG3s4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dCG3tIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dCG3tYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dCG3toGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dCG3t4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dCG3uIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dCG3uYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RangeIndicator" xmi:id="_cODmRIGyEeqKnMyI8vv9TQ" computed="true">
        <parameters xmi:id="_cODmRYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
        <lowerValue xmi:id="_cODmRoGyEeqKnMyI8vv9TQ" count="18928" computed="true" value="2015-04-01" datatype="91">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5JYGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Start_Date&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dCPakIGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
            <taggedValue xmi:id="_dCPakYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
            <taggedValue xmi:id="_dCPakoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
            <sqlGenericExpression xmi:id="_dCPak4GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
          </builtInIndicatorDefinition>
        </lowerValue>
        <upperValue xmi:id="_cODmR4GyEeqKnMyI8vv9TQ" count="18928" computed="true" value="2015-07-01" datatype="91">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodoIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5JoGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Start_Date&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dCaZsIGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
            <taggedValue xmi:id="_dCaZsYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
            <taggedValue xmi:id="_dCaZsoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
            <sqlGenericExpression xmi:id="_dCaZs4GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
          </builtInIndicatorDefinition>
        </upperValue>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODmSYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODmSoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjZ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dCn1EIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_dCn1EYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_dCn1EoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_dCn1E4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODmS4GyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODmTIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5J4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;End_Date&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dCzbQIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_dCzbQYGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_dCzbQoGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_dCzbQ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODmTYGyEeqKnMyI8vv9TQ" count="18928" computed="true" distinctValueCount="2">
        <parameters xmi:id="_cODmToGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5KIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;End_Date&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dC7-IIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_dC7-IYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_dC7-IoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_dC7-I4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODmT4GyEeqKnMyI8vv9TQ" count="18928" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODmUIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5KYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;End_Date&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;End_Date&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dDD58IGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_dDD58YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_dDD58oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_dDD584GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dDD59IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dDD59YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dDD59oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dDD594GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dDD5-IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dDD5-YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODmUYGyEeqKnMyI8vv9TQ" count="18928" computed="true" duplicateValueCount="2">
        <parameters xmi:id="_cODmUoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5KoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;End_Date&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;End_Date&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dDPgIIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_dDPgIYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_dDPgIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_dDPgI4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dDPgJIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dDPgJYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dDPgJoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dDPgJ4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dDPgKIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dDPgKYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RangeIndicator" xmi:id="_cODmU4GyEeqKnMyI8vv9TQ" computed="true">
        <parameters xmi:id="_cODmVIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
        <lowerValue xmi:id="_cODmVYGyEeqKnMyI8vv9TQ" count="18928" computed="true" value="2018-03-31" datatype="91">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5K4GyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;End_Date&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dDXb8IGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
            <taggedValue xmi:id="_dDXb8YGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
            <taggedValue xmi:id="_dDXb8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
            <sqlGenericExpression xmi:id="_dDXb84GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
          </builtInIndicatorDefinition>
        </lowerValue>
        <upperValue xmi:id="_cODmVoGyEeqKnMyI8vv9TQ" count="18928" computed="true" value="2018-06-30" datatype="91">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodpIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5LIGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;End_Date&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dDgl4IGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
            <taggedValue xmi:id="_dDgl4YGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
            <taggedValue xmi:id="_dDgl4oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
            <sqlGenericExpression xmi:id="_dDgl44GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
          </builtInIndicatorDefinition>
        </upperValue>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODmWIGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODmWYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjboGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dDpIwIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_dDpIwYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_dDpIwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_dDpIw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODmWoGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true">
        <parameters xmi:id="_cODmW4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5LYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Longitude&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dDxEkIGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_dDxroIGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_dDxroYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_dDxrooGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODmXIGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" distinctValueCount="4369">
        <parameters xmi:id="_cODmXYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5LoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Longitude&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dD8qwIGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_dD8qwYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_dD8qwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_dD8qw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODmXoGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODmX4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5L4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Longitude&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Longitude&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dEFNoIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_dEFNoYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_dEFNooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_dEFNo4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dEFNpIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dEFNpYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dEFNpoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dEFNp4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dEFNqIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dEFNqYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODmYIGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" duplicateValueCount="4369">
        <parameters xmi:id="_cODmYYGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5MIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Longitude&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Longitude&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dENwgIGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_dENwgYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_dENwgoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_dENwg4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dENwhIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dENwhYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dENwhoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dENwh4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dENwiIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dENwiYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BoxIndicator" xmi:id="_cODmYoGyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODmY4GyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Summary_Statistics_0.1.definition#_ccI48BF2Ed2PKb6nEJEvhw"/>
        <IQR xmi:id="_cODmZIGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Inter_Quartile_Range_0.1.definition#_ccI48xF2Ed2PKb6nEJEvhw"/>
          <lowerValue xsi:type="dataquality.indicators:LowerQuartileIndicator" xmi:id="_cODmZYGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" value="-98.93327331542969" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Lower_Quartile_0.1.definition#_ccI49BF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJw-4IGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Longitude&quot; FROM (SELECT TOP 4377 &quot;Longitude&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Longitude&quot; IS NOT NULL  ORDER BY &quot;Longitude&quot; ASC ) AS FOO ORDER BY &quot;Longitude&quot; DESC ) AS BAR ORDER BY &quot;Longitude&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dE6UEIGyEeqKnMyI8vv9TQ" name="Lower Quartile" label="Lower Quartile">
              <taggedValue xmi:id="_dE6UEYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are below this value and 3/4th are above"/>
              <taggedValue xmi:id="_dE6UEoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the lowest 1/4th records"/>
              <sqlGenericExpression xmi:id="_dE6UE4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  3* SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*(SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_dE6UFIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_dE6UFYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_dE6UFoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE (NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) /4) +1) " language="DB2"/>
              <sqlGenericExpression xmi:id="_dE6UF4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_dE6UGIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xsi:type="dataquality.indicators:UpperQuartileIndicator" xmi:id="_cODmZoGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" value="-82.6231689453125" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Upper_Quartile_0.1.definition#_ccI49RF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJ5hwIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Longitude&quot; FROM (SELECT TOP 13129 &quot;Longitude&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Longitude&quot; IS NOT NULL  ORDER BY &quot;Longitude&quot; ASC ) AS FOO ORDER BY &quot;Longitude&quot; DESC ) AS BAR ORDER BY &quot;Longitude&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dFFTMIGyEeqKnMyI8vv9TQ" name="Upper Quartile" label="Upper Quartile">
              <taggedValue xmi:id="_dFFTMYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are above this value and 3/4th are below"/>
              <taggedValue xmi:id="_dFFTMoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the highest 1/4th records"/>
              <sqlGenericExpression xmi:id="_dFFTM4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) ) AND 3 * SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)  &lt;= ( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_dFFTNIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_dFFTNYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_dFFTNoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE ( NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>)*3 /4) +1 ) " language="DB2"/>
              <sqlGenericExpression xmi:id="_dFFTN4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_dFFTOIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </IQR>
        <rangeIndicator xmi:id="_cODmZ4GyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
          <lowerValue xmi:id="_cODmaIGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" value="-159.67005920410156" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJpDEYGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Longitude&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dEnZIIGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
              <taggedValue xmi:id="_dEnZIYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
              <taggedValue xmi:id="_dEnZIoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
              <sqlGenericExpression xmi:id="_dEnZI4GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xmi:id="_cODmaYGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" value="-66.14967346191406" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJpDEoGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Longitude&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dEyYQIGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
              <taggedValue xmi:id="_dEyYQYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
              <taggedValue xmi:id="_dEyYQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
              <sqlGenericExpression xmi:id="_dEyYQ4GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </rangeIndicator>
        <meanIndicator xmi:id="_cODmaoGyEeqKnMyI8vv9TQ" count="17504" nullCount="1424" computed="true" sumStr="-1632082.6278686523">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Mean_0.1.definition#_ccI48RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJf5MYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&quot;Longitude&quot;), COUNT(&quot;Longitude&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dEW6cIGyEeqKnMyI8vv9TQ" name="Mean" label="Mean">
            <taggedValue xmi:id="_dEW6cYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the mean (average) of the records"/>
            <taggedValue xmi:id="_dEW6coGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the mean value of numerical records"/>
            <sqlGenericExpression xmi:id="_dEW6c4GyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_dEW6dIGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_dEW6dYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_dEW6doGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_dEW6d4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CAST (&lt;%=__COLUMN_NAMES__%> AS REAL)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_dEW6eIGyEeqKnMyI8vv9TQ" body="SELECT SUM(double(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
          </builtInIndicatorDefinition>
        </meanIndicator>
        <medianIndicator xmi:id="_cODma4GyEeqKnMyI8vv9TQ" nullCount="1424" computed="true" median="-90.39937210083008">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodqIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Median_0.1.definition#_ccI48hF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJpDEIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Longitude&quot; FROM (SELECT TOP 8753 &quot;Longitude&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Longitude&quot; IS NOT NULL  ORDER BY &quot;Longitude&quot; ASC ) AS FOO ORDER BY &quot;Longitude&quot; DESC ) AS BAR" language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dEe2QIGyEeqKnMyI8vv9TQ" name="Median" label="Median">
            <taggedValue xmi:id="_dEe2QYGyEeqKnMyI8vv9TQ" tag="Description" value="The median is the value separating the higher half of a sample, a population or a probability distribution from the lower half"/>
            <taggedValue xmi:id="_dEe2QoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the median of the records"/>
            <sqlGenericExpression xmi:id="_dEe2Q4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
            <sqlGenericExpression xmi:id="_dEe2RIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_dEe2RYGyEeqKnMyI8vv9TQ" body="SELECT AVG(&lt;%=__COLUMN_NAMES__%>) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="Oracle"/>
            <sqlGenericExpression xmi:id="_dEe2RoGyEeqKnMyI8vv9TQ" body="SELECT MEDIAN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="10"/>
            <sqlGenericExpression xmi:id="_dEe2R4GyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="9"/>
            <sqlGenericExpression xmi:id="_dEe2SIGyEeqKnMyI8vv9TQ" body="SELECT AVG(double(&lt;%=__COLUMN_NAMES__%>)) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="DB2"/>
            <sqlGenericExpression xmi:id="_dEe2SYGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_dEe2SoGyEeqKnMyI8vv9TQ" body="SELECT AVG(cast (&lt;%=__COLUMN_NAMES__%> AS NUMERIC)) FROM (SELECT distinct &lt;%=__COLUMN_NAMES__%> FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) STT WHERE (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) AS SOU WHERE SOU.&lt;%=__COLUMN_NAMES__%> &lt;= STT.&lt;%=__COLUMN_NAMES__%>) AND (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%>) AS SUR WHERE SUR.&lt;%=__COLUMN_NAMES__%> >= STT.&lt;%=__COLUMN_NAMES__%>) ) T" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_dEe2S4GyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR" language="Microsoft SQL Server"/>
          </builtInIndicatorDefinition>
        </medianIndicator>
      </indicators>
      <indicators xsi:type="dataquality.indicators:RowCountIndicator" xmi:id="_cODmbYGyEeqKnMyI8vv9TQ" count="18928" computed="true">
        <parameters xmi:id="_cODmboGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Row_Count_0.1.definition#_ccFOkBF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dGyjcoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dFNPAIGyEeqKnMyI8vv9TQ" name="Row Count" label="Row Count">
          <taggedValue xmi:id="_dFNPAYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of rows"/>
          <taggedValue xmi:id="_dFNPAoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of records"/>
          <sqlGenericExpression xmi:id="_dFNPA4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:NullCountIndicator" xmi:id="_cODmb4GyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true">
        <parameters xmi:id="_cODmcIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Null_Count_0.1.definition#_GrAeADh9Ed2XmO7pl5Yuyg"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJ5hwYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Latitude&quot; IS NULL " language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dFVK0IGyEeqKnMyI8vv9TQ" name="Null Count" label="Null Count">
          <taggedValue xmi:id="_dFVK0YGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluate the number of missing data (null records)"/>
          <taggedValue xmi:id="_dFVK0oGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of null rows"/>
          <sqlGenericExpression xmi:id="_dFVK04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DistinctCountIndicator" xmi:id="_cODmcYGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" distinctValueCount="4369">
        <parameters xmi:id="_cODmcoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Distinct_Count_0.1.definition#_ccHq0BF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJ5hwoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &quot;Latitude&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; ) A" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dFgJ8IGyEeqKnMyI8vv9TQ" name="Distinct Count" label="Distinct Count">
          <taggedValue xmi:id="_dFgJ8YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of distinct rows (like a &quot;SELECT DISTINCT&quot; SQL statement)"/>
          <taggedValue xmi:id="_dFgJ8oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of distinct records"/>
          <sqlGenericExpression xmi:id="_dFgJ84GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT DISTINCT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) A" language="SQL"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:UniqueCountIndicator" xmi:id="_cODmc4GyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" uniqueValueCount="0">
        <parameters xmi:id="_cODmdIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Unique_Count_0.1.definition#_ccHq0RF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJ5hw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Latitude&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  GROUP BY &quot;Latitude&quot; HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dFoFwIGyEeqKnMyI8vv9TQ" name="Unique Count" label="Unique Count">
          <taggedValue xmi:id="_dFoFwYGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of unique rows (i.e. distinct rows with only one instance: rows that are not duplicated)"/>
          <taggedValue xmi:id="_dFoFwoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of unique records"/>
          <sqlGenericExpression xmi:id="_dFoFw4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dFoFxIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dFoFxYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dFoFxoGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount = 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dFoFx4GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dFoFyIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dFoFyYGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) = 1)  myquery" language="Hive" version=""/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:DuplicateCountIndicator" xmi:id="_cODmdYGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" duplicateValueCount="4369">
        <parameters xmi:id="_cODmdoGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Simple Statistics/Duplicate_Count_0.1.definition#_ccHq0hF2Ed2PKb6nEJEvhw"/>
        <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJ5hxIGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &quot;Latitude&quot;, COUNT(*) mycount FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot;  m  GROUP BY &quot;Latitude&quot; HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
        <builtInIndicatorDefinition xmi:id="_dFyd0IGyEeqKnMyI8vv9TQ" name="Duplicate Count" label="Duplicate Count">
          <taggedValue xmi:id="_dFyd0YGyEeqKnMyI8vv9TQ" tag="Description" value="counts the number of duplicate rows. This number and the number of unique data equals the number of distinct rows"/>
          <taggedValue xmi:id="_dFyd0oGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the number of duplicated records"/>
          <sqlGenericExpression xmi:id="_dFyd04GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="SQL"/>
          <sqlGenericExpression xmi:id="_dFyd1IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="MySQL"/>
          <sqlGenericExpression xmi:id="_dFyd1YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Oracle"/>
          <sqlGenericExpression xmi:id="_dFyd1oGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING mycount > 1) AS myquery" language="Teradata"/>
          <sqlGenericExpression xmi:id="_dFyd14GyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Microsoft SQL Server"/>
          <sqlGenericExpression xmi:id="_dFyd2IGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) mycount FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) AS myquery" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
          <sqlGenericExpression xmi:id="_dFyd2YGyEeqKnMyI8vv9TQ" body="SELECT COUNT(*) FROM (SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) FROM &lt;%=__TABLE_NAME__%>  m &lt;%=__WHERE_CLAUSE__%> GROUP BY &lt;%=__COLUMN_NAMES__%> HAVING COUNT(*) > 1) myquery" language="Hive"/>
        </builtInIndicatorDefinition>
      </indicators>
      <indicators xsi:type="dataquality.indicators:BoxIndicator" xmi:id="_cODmd4GyEeqKnMyI8vv9TQ">
        <parameters xmi:id="_cODmeIGyEeqKnMyI8vv9TQ"/>
        <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
        <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Summary_Statistics_0.1.definition#_ccI48BF2Ed2PKb6nEJEvhw"/>
        <IQR xmi:id="_cODmeYGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Inter_Quartile_Range_0.1.definition#_ccI48xF2Ed2PKb6nEJEvhw"/>
          <lowerValue xsi:type="dataquality.indicators:LowerQuartileIndicator" xmi:id="_cODmeoGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" value="34.01724433898926" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Lower_Quartile_0.1.definition#_ccI49BF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dKL1oIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Latitude&quot; FROM (SELECT TOP 4377 &quot;Latitude&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Latitude&quot; IS NOT NULL  ORDER BY &quot;Latitude&quot; ASC ) AS FOO ORDER BY &quot;Latitude&quot; DESC ) AS BAR ORDER BY &quot;Latitude&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dGfocIGyEeqKnMyI8vv9TQ" name="Lower Quartile" label="Lower Quartile">
              <taggedValue xmi:id="_dGfocYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are below this value and 3/4th are above"/>
              <taggedValue xmi:id="_dGfocoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the lowest 1/4th records"/>
              <sqlGenericExpression xmi:id="_dGfoc4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  3* SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*(SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_dGfodIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_dGfodYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_dGfodoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE (NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) /4) +1) " language="DB2"/>
              <sqlGenericExpression xmi:id="_dGfod4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_dGfoeIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xsi:type="dataquality.indicators:UpperQuartileIndicator" xmi:id="_cODme4GyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" value="41.787431716918945" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Upper_Quartile_0.1.definition#_ccI49RF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dKUYgIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Latitude&quot; FROM (SELECT TOP 13129 &quot;Latitude&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Latitude&quot; IS NOT NULL  ORDER BY &quot;Latitude&quot; ASC ) AS FOO ORDER BY &quot;Latitude&quot; DESC ) AS BAR ORDER BY &quot;Latitude&quot; ASC " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dGnkQIGyEeqKnMyI8vv9TQ" name="Upper Quartile" label="Upper Quartile">
              <taggedValue xmi:id="_dGnkQYGyEeqKnMyI8vv9TQ" tag="Description" value="1/4th of the records are above this value and 3/4th are below"/>
              <taggedValue xmi:id="_dGnkQoGyEeqKnMyI8vv9TQ" tag="Purpose" value="indiquates the threshold of the highest 1/4th records"/>
              <sqlGenericExpression xmi:id="_dGnkQ4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= 3*( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) ) AND 3 * SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)  &lt;= ( SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END) + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
              <sqlGenericExpression xmi:id="_dGnkRIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
              <sqlGenericExpression xmi:id="_dGnkRYGyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
              <sqlGenericExpression xmi:id="_dGnkRoGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, ROW_NUMBER() OVER(ORDER BY &lt;%=__COLUMN_NAMES__%>) AS NUMBER FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ) T1 WHERE ( NUMBER =  INTEGER((SELECT COUNT(*) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>)*3 /4) +1 ) " language="DB2"/>
              <sqlGenericExpression xmi:id="_dGnkR4GyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
              <sqlGenericExpression xmi:id="_dGnkSIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR ORDER BY &lt;%=__COLUMN_NAMES__%> ASC " language="Microsoft SQL Server"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </IQR>
        <rangeIndicator xmi:id="_cODmfIGyEeqKnMyI8vv9TQ">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Range_0.1.definition#_ccI49hF2Ed2PKb6nEJEvhw"/>
          <lowerValue xmi:id="_cODmfYGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" value="18.397663116455078" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Minimum_0.1.definition#_ccJgABF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dKDSwIGyEeqKnMyI8vv9TQ" body="SELECT MIN(&quot;Latitude&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dGNUkIGyEeqKnMyI8vv9TQ" name="Minimum" label="Minimum">
              <taggedValue xmi:id="_dGNUkYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the minimal record"/>
              <taggedValue xmi:id="_dGNUkoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the minimal record"/>
              <sqlGenericExpression xmi:id="_dGNUk4GyEeqKnMyI8vv9TQ" body="SELECT MIN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </lowerValue>
          <upperValue xmi:id="_cODmfoGyEeqKnMyI8vv9TQ" count="18928" nullCount="1424" computed="true" value="71.29813385009766" datatype="8">
            <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
            <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Maximum_0.1.definition#_ccJgARF2Ed2PKb6nEJEvhw"/>
            <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dKDSwYGyEeqKnMyI8vv9TQ" body="SELECT MAX(&quot;Latitude&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
            <builtInIndicatorDefinition xmi:id="_dGVQYIGyEeqKnMyI8vv9TQ" name="Maximum" label="Maximum">
              <taggedValue xmi:id="_dGVQYYGyEeqKnMyI8vv9TQ" tag="Description" value="gives the maximal record"/>
              <taggedValue xmi:id="_dGVQYoGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the maximal record"/>
              <sqlGenericExpression xmi:id="_dGVQY4GyEeqKnMyI8vv9TQ" body="SELECT MAX(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            </builtInIndicatorDefinition>
          </upperValue>
        </rangeIndicator>
        <meanIndicator xmi:id="_cODmf4GyEeqKnMyI8vv9TQ" count="17504" nullCount="1424" computed="true" sumStr="666108.8606643677">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Mean_0.1.definition#_ccI48RF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dJ5hxYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&quot;Latitude&quot;), COUNT(&quot;Latitude&quot;) FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; " language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dF6ZoIGyEeqKnMyI8vv9TQ" name="Mean" label="Mean">
            <taggedValue xmi:id="_dF6ZoYGyEeqKnMyI8vv9TQ" tag="Description" value="computes the mean (average) of the records"/>
            <taggedValue xmi:id="_dF6ZooGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the mean value of numerical records"/>
            <sqlGenericExpression xmi:id="_dF6Zo4GyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="SQL"/>
            <sqlGenericExpression xmi:id="_dF6ZpIGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_dF6ZpYGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Oracle"/>
            <sqlGenericExpression xmi:id="_dF6ZpoGyEeqKnMyI8vv9TQ" body="SELECT SUM(&lt;%=__COLUMN_NAMES__%>), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_dF6Zp4GyEeqKnMyI8vv9TQ" body="SELECT SUM(CAST (&lt;%=__COLUMN_NAMES__%> AS REAL)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="Teradata"/>
            <sqlGenericExpression xmi:id="_dF6ZqIGyEeqKnMyI8vv9TQ" body="SELECT SUM(double(&lt;%=__COLUMN_NAMES__%>)), COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>" language="DB2"/>
          </builtInIndicatorDefinition>
        </meanIndicator>
        <medianIndicator xmi:id="_cODmgIGyEeqKnMyI8vv9TQ" nullCount="1424" computed="true" median="38.669586181640625">
          <analyzedElement xsi:type="relational:TdColumn" href="../../metadata/connections/ss2019_0.1.item#_yYodrIDWEeqaA6ki9FkMoA"/>
          <indicatorDefinition href="../../TDQ_Libraries/Indicators/System Indicators/Summary Statistics/Median_0.1.definition#_ccI48hF2Ed2PKb6nEJEvhw"/>
          <instantiatedExpressions xsi:type="relational:TdExpression" xmi:id="_dKCrsIGyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP 2 &quot;Latitude&quot; FROM (SELECT TOP 8753 &quot;Latitude&quot; FROM &quot;ProjectDataBiryani&quot;.&quot;dbo&quot;.&quot;Staging_HospitalPaymentPerformance&quot; WHERE &quot;Latitude&quot; IS NOT NULL  ORDER BY &quot;Latitude&quot; ASC ) AS FOO ORDER BY &quot;Latitude&quot; DESC ) AS BAR" language="Microsoft SQL Server"/>
          <builtInIndicatorDefinition xmi:id="_dGC8gIGyEeqKnMyI8vv9TQ" name="Median" label="Median">
            <taggedValue xmi:id="_dGC8gYGyEeqKnMyI8vv9TQ" tag="Description" value="The median is the value separating the higher half of a sample, a population or a probability distribution from the lower half"/>
            <taggedValue xmi:id="_dGC8goGyEeqKnMyI8vv9TQ" tag="Purpose" value="evaluates the median of the records"/>
            <sqlGenericExpression xmi:id="_dGC8g4GyEeqKnMyI8vv9TQ" body="SELECT AVG(DISTINCT &lt;%=__COLUMN_NAMES__%>) FROM (SELECT a.&lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> a, &lt;%=__TABLE_NAME__%> b WHERE a.&lt;%=__COLUMN_NAMES__%> IS NOT NULL AND b.&lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> GROUP BY a.&lt;%=__COLUMN_NAMES__%> HAVING  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  +  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) AND  SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> > a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END) &lt;= (SUM(CASE WHEN a.&lt;%=__COLUMN_NAMES__%> = b.&lt;%=__COLUMN_NAMES__%> THEN 1 ELSE 0 END)  + SUM(CASE WHEN  b.&lt;%=__COLUMN_NAMES__%> &lt; a.&lt;%=__COLUMN_NAMES__%>   THEN 1 ELSE 0 END)) ) T" language="SQL"/>
            <sqlGenericExpression xmi:id="_dGC8hIGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_OFFSET__%>,&lt;%=__LIMIT_ROW__%>" language="MySQL"/>
            <sqlGenericExpression xmi:id="_dGC8hYGyEeqKnMyI8vv9TQ" body="SELECT AVG(&lt;%=__COLUMN_NAMES__%>) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> &lt;%=__WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="Oracle"/>
            <sqlGenericExpression xmi:id="_dGC8hoGyEeqKnMyI8vv9TQ" body="SELECT MEDIAN(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="10"/>
            <sqlGenericExpression xmi:id="_dGC8h4GyEeqKnMyI8vv9TQ" body=" SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY &lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>" language="Oracle" version="9"/>
            <sqlGenericExpression xmi:id="_dGC8iIGyEeqKnMyI8vv9TQ" body="SELECT AVG(double(&lt;%=__COLUMN_NAMES__%>)) FROM ( SELECT &lt;%=__COLUMN_NAMES__%>, COUNT(*) OVER( ) total, CAST(COUNT(*) OVER( ) AS DECIMAL)/2 mid, CEIL(CAST(COUNT(*) OVER( ) AS DECIMAL)/2) next, ROW_NUMBER() OVER ( ORDER BY &lt;%=__COLUMN_NAMES__%>) rn FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%>) x WHERE ( MOD(total,2) = 0&#x9; AND rn IN ( mid, mid+1 ) ) OR ( MOD(total,2) = 1 AND rn = next )" language="DB2"/>
            <sqlGenericExpression xmi:id="_dGC8iYGyEeqKnMyI8vv9TQ" body="SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> LIMIT &lt;%=__LIMIT_ROW__%> OFFSET &lt;%=__LIMIT_OFFSET__%>" language="PostgreSQL"/>
            <sqlGenericExpression xmi:id="_dGC8ioGyEeqKnMyI8vv9TQ" body="SELECT AVG(cast (&lt;%=__COLUMN_NAMES__%> AS NUMERIC)) FROM (SELECT distinct &lt;%=__COLUMN_NAMES__%> FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) STT WHERE (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> ) AS SOU WHERE SOU.&lt;%=__COLUMN_NAMES__%> &lt;= STT.&lt;%=__COLUMN_NAMES__%>) AND (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM &lt;%=__TABLE_NAME__%>) &lt;= (SELECT COUNT(&lt;%=__COLUMN_NAMES__%>) FROM (SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> UNION ALL SELECT &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%>) AS SUR WHERE SUR.&lt;%=__COLUMN_NAMES__%> >= STT.&lt;%=__COLUMN_NAMES__%>) ) T" language="Adaptive Server Enterprise | Sybase Adaptive Server IQ"/>
            <sqlGenericExpression xmi:id="_dGC8i4GyEeqKnMyI8vv9TQ" body="SELECT * FROM (SELECT TOP &lt;%=__LIMIT_ROW__%> &lt;%=__COLUMN_NAMES__%> FROM (SELECT TOP &lt;%=__LIMIT_ROW_PLUS_OFFSET__%> &lt;%=__COLUMN_NAMES__%> FROM &lt;%=__TABLE_NAME__%> WHERE &lt;%=__COLUMN_NAMES__%> IS NOT NULL &lt;%=__AND_WHERE_CLAUSE__%> ORDER BY &lt;%=__COLUMN_NAMES__%> ASC ) AS FOO ORDER BY &lt;%=__COLUMN_NAMES__%> DESC ) AS BAR" language="Microsoft SQL Server"/>
          </builtInIndicatorDefinition>
        </medianIndicator>
      </indicators>
    </results>
    <parameters xmi:id="_OzqcCoGyEeqKnMyI8vv9TQ" dataFilter="_cOELoYGyEeqKnMyI8vv9TQ" analysisType="Multiple Column Analysis"/>
    <contextType xmi:id="_cOCWcIGyEeqKnMyI8vv9TQ" confirmationNeeded="false" name="Default"/>
  </dataquality.analysis:Analysis>
  <dataquality.domain:Domain xmi:id="_cOELoYGyEeqKnMyI8vv9TQ" name="Hospital Payment and Performance">
    <ranges xmi:id="_cOELooGyEeqKnMyI8vv9TQ">
      <expressions xmi:id="_cOELo4GyEeqKnMyI8vv9TQ">
        <expression xsi:type="relational:TdExpression" xmi:id="_cOELpIGyEeqKnMyI8vv9TQ" body="" language="SQL"/>
      </expressions>
    </ranges>
  </dataquality.domain:Domain>
</xmi:XMI>
